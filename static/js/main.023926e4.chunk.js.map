{"version":3,"sources":["lib/tabular-xlsx.ts","lib/utils.ts","utils.ts","lib/csv.ts","examples/index.ts","table-generator.tsx","components/select.tsx","components/input.tsx","components/textarea.tsx","lines-rows.tsx","lib/lines-to-rows.ts","csv.tsx","lib/srt-vtt.ts","srt-vtt/multiple.js","srt-vtt/single.js","srt-vtt/index.js","layout.tsx","routes.tsx","serviceWorker.js","index.tsx"],"names":["isObjectAndNotArray","c","Array","isArray","worksheet","wb","rows","worksheetName","ws","addWorksheet","map","row","i","val","j","content","l","merged","h","v","getMerged","cell","mergeI","mergeJ","getCell","number","startsWith","link","string","Date","date","bool","style","toXlsx","a","xl","Workbook","Object","entries","forEach","k","writeToBuffer","serveFile","x","contentType","filename","b","type","Blob","bitToBlob","url","window","URL","createObjectURL","document","createElement","href","setAttribute","click","jsonBeautify","jsContent","JSON","stringify","toExportTxt","txt","toCsv","separator","reduce","Csv","parse","readFile","file","Promise","resolve","fileReader","FileReader","onloadend","data","result","readAsText","colorByStatus","status","load","exampleId","users","splice","user","firstName","lastName","font","bold","usersSimple","styleBoldAndBlue","color","age","Math","ceil","random","maleOrFemaleInt","round","maleOrFemale","fill","patternType","fgColor","usersAdvanced","multiPageImport","TableGenerator","props","onClick","workbookName","then","Utils","state","handleChange","target","value","setState","err","loadExample","Example","renderNav","navs","id","name","fx","className","key","this","Fragment","minWidth","height","placeholder","onChange","React","Component","Input","options","LineToRows","getXlsx","mapAttributes","form","getContent","length","headers","keys","r","push","concat","nSeqLen","lines","mappingAttributes","seqNLines","line","t","lineToRows","split","getJson","json","updateForm","NUtils","ds","updateObject","renderMapAttributes","_","renderJson","srtToJson","idx","Number","timestamp","jsonUnitToVtt","join","jsonToVtt","zipFolderFromContentArray","cArray","zip","JSZip","generateAsync","location","event","files","all","from","console","log","SrtToVtt","f","replace","multiple","alert","useState","setData","borderTop","borderBottom","boxShadow","children","to","role","sha","process","Default","history","History","basename","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8wBAsCaA,EAAsB,SACjCC,GAEA,QAAsB,kBAANA,IAAmBC,MAAMC,QAAQF,KAG7CG,EAAY,SAACC,EAAQC,EAAeC,GACxC,IAAMC,EAAKH,EAAGI,aAAaF,GAkD3B,OA/CAD,EAAKI,KAAI,SAACC,EAAKC,GA4Cb,OA1CAD,EAAID,KAAI,SAACG,EAAKC,GACO,kBAARD,IAETA,EAAM,CAAEE,QAASF,IAGnB,IAxBiBG,EAwBXC,EApCa,SAACJ,GACxB,SACEA,EAAII,QACoB,kBAAjBJ,EAAII,OAAOC,GACM,kBAAjBL,EAAII,OAAOE,IAEXN,EAAII,OA8BMG,CAAUP,GAEnBQ,EArDI,SACdb,EACAI,EACAE,GAEI,IADJG,EACG,wDACH,GAAIA,EAAQ,CACV,IAAMK,EAASV,EAAI,EAAIK,EAAOE,EACxBI,EAAST,EAAI,EAAIG,EAAOC,EAC9B,OAAOV,EAAGa,KAAKT,EAAI,EAAGE,EAAI,EAAGQ,EAAQC,GAAQ,GAG/C,OAAOf,EAAGa,KAAKT,EAAI,EAAGE,EAAI,GAyCTU,CAAQhB,EAAII,EAAGE,EAAGG,GAE/B,cAAeJ,EAAIE,SACjB,IAAK,SACHM,EAAKI,OAAOZ,EAAIE,SAChB,MACF,IAAK,UAhCUC,EAiCFH,EAAIE,SAhCrBW,WAAW,YAAcV,EAAEU,WAAW,YAiC9BL,EAAKM,KAAKd,EAAIE,SAEdM,EAAKO,OAAOf,EAAIE,SAElB,MACF,IAAK,SACQF,EAAIE,mBApC+Bc,KAqC5CR,EAAKS,KAAKjB,EAAIE,SAEdM,EAAKO,OAAOf,EAAIE,SAElB,MACF,IAAK,UACHM,EAAKU,KAAKlB,EAAIE,SACd,MACF,QACEM,EAAKO,OAAO,OAQhB,OAJIf,EAAImB,OACNX,EAAKW,MAAMnB,EAAImB,QAGV,MAEF,MAGF,GAQIC,EAAM,uCAAG,WACpBlB,GADoB,6BAAAmB,EAAA,6DAEpB3B,EAFoB,+BAEI,SAElBF,EAAS,IAAI8B,IAAGC,SAEjBpC,EAAoBe,GAGvBX,EAAUC,EAAIU,EAASR,GAFvB8B,OAAOC,QAAQvB,GAASwB,SAAQ,mCAAEC,EAAF,KAAKlC,EAAL,YAAeF,EAAUC,EAAIC,EAAMkC,MAPjD,SAYPnC,EAAGoC,gBAZI,mFAAH,sDCpGNC,EAAY,SACvBC,EACAC,EACAC,GAEA,IAAMC,EAPiB,SAACH,EAAaI,GAAd,OAA+B,IAAIC,KAAK,CAACL,GAAI,CAAEI,SAO5DE,CAAUN,EAAGC,GACjBM,EAAMC,OAAOC,IAAIC,gBAAgBP,GAOjCZ,EAAIoB,SAASC,cAAc,KACjCrB,EAAEsB,KAAON,EACThB,EAAEuB,aAAa,WAAYZ,GAC3BX,EAAEwB,SCCSC,EAAe,SAACC,GAAD,OAC1BC,KAAKC,UAAUF,EAAW,KAAM,OAcrBG,EAAc,SAACC,GAAD,OACzBtB,EAAUsB,EAAK,2BAA4B,eAEhCC,EAAQ,SAAClD,GACpB,IACM4B,ECxCU,SAACrC,GAAoC,IAArB4D,EAAoB,uDAAR,IAC5C,OAAO5D,EACJI,KAAI,SAACC,GACJ,OAAOA,EACJD,KAAI,SAACiC,GAAD,OAAOkB,KAAKC,UAAUnB,MAC1BwB,QAAO,SAACjC,EAAGY,GAAJ,OAAUZ,EAAIgC,EAAYpB,QAErCqB,QAAO,SAACjC,EAAGY,GAAJ,OAAUZ,EAAI,KAAOY,KDiCrBsB,CADQP,KAAKQ,MAAMtD,IAE7B2B,EAAUC,EAAG,kBAAmB,eAWrB2B,EAAW,SAACC,GACvB,OAAO,IAAIC,SAAQ,SAACC,GAClB,IAAMC,EAAa,IAAIC,WACvBD,EAAWE,UAAY,SAAC1C,GACtB,IAAM2C,EAAOH,EAAWI,OACxBL,EAAQI,IAGVH,EAAWK,WAAWR,O,0BElCbS,EAAgB,SAC3BC,GAEA,MAAe,OAAXA,EAAwB,QACb,aAAXA,EAA8B,MACnB,YAAXA,EAA6B,cAAjC,GAmFWC,EAAO,SAACC,GACnB,OAAQA,GACN,KAAK,EACH,OA5EqB,WACzB,IACMvB,EAAwBwB,EAAMC,OAAO,EADjC,IACuC3E,KAAI,SAAC4E,GACpD,MAAO,CAACA,EAAKC,UAAWD,EAAKE,aAU/B,MAAM,CAPsB,CAAC,aAAc,aAAa9E,KAAI,SAACiC,GAC3D,MAAO,CACL5B,QAAS4B,EACTX,MAAO,CAAEyD,KAAM,CAAEC,MAAM,SAI3B,mBAAoB9B,IA+DT+B,GACT,KAAK,EACH,OA9DuB,WAC3B,IAAMC,EAA8B,CAAEH,KAAM,CAAEI,MAAO,OAAQH,MAAM,IAEnE,OAAON,EAAM1E,KAAI,SAAC4E,GAChB,IAAMtD,EAAmB,CACvByD,KAAM,CAAEI,MAAOb,EAAcM,EAAKL,UAE9BA,EAAS,CAAElE,QAASuE,EAAKL,OAAQjD,MAAOA,GACxC8D,EAAM,CAAE/E,QA1BiBgF,KAAKC,KAAK,IAAOD,KAAKE,UA0BbjE,MAAO4D,GACzCM,EAAkBH,KAAKI,MAAMJ,KAAKE,UAGlCG,EAAyB,CAC7BrF,QAH2C,IAApBmF,EAAwB,OAAS,SAIxDlE,MAAO,CACLqE,KAAM,CACJtD,KAAM,UACNuD,YAAa,QACbC,QAPwC,IAApBL,EAAwB,OAAS,QASvDT,KAAM,CAAEI,MAAO,WAYnB,MARiC,CAC/BP,EAAKC,UACLD,EAAKE,SACLP,EACAa,EACAM,MAiCOI,GACT,KAAK,EACH,OA1BDC,EA2BD,KAAK,EACH,MA1BqB,CACzB,CACE,CACE1F,QAAS,SACTE,OAAQ,CAAEE,EAAG,EAAGD,EAAG,KAGvB,GACA,CAAC,EAAG,EAAG,uBAmBL,KAAK,EACH,MAjBgD,CACpD,CAAC,IAAK,GACN,CAAC,IAAK,KACN,CAAC,IAAK,QC1GawF,E,kDAInB,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAKRC,QAAU,YHQY,SAAC7F,GAAkD,IAAjC8F,EAAgC,uDAAjB,aACjDjD,EAAYC,KAAKQ,MAAMtD,GAE7BkB,EAAO2B,EAAWiD,GAAcC,MAAK,SAACnE,GACpCD,EACEC,EACA,oEACA,kBGZFoE,CAFoB,EAAKC,MAAjBjG,UAPc,EAYxBkG,aAAe,SAAC/E,GACd,IACE,IAAMnB,EAAUmB,EAAEgF,OAAOC,MAEzB,EAAKC,SAAS,CAAErG,YAChB,MAAOsG,MAjBa,EAoBxBC,YAAc,SAACnC,GACb,IAAMvB,EAAY2D,EAAapC,GAC/B,EAAKiC,SAAS,CAAErG,QAASgG,EAAmBnD,MAtBtB,EAyBxB4D,UAAY,WACV,IAAMC,EAAO,CACX,CAAEC,GAAI,EAAGC,KAAM,cAAeC,GAAI,kBAAM,EAAKN,YAAY,KACzD,CAAEI,GAAI,EAAGC,KAAM,gBAAiBC,GAAI,kBAAM,EAAKN,YAAY,KAC3D,CAAEI,GAAI,EAAGC,KAAM,aAAcC,GAAI,kBAAM,EAAKN,YAAY,KACxD,CAAEI,GAAI,EAAGC,KAAM,QAASC,GAAI,kBAAM,EAAKN,YAAY,MAWrD,OAAO,wBAAIO,UAAU,OAAOJ,EAAK/G,KARlB,SAACE,GAAD,OACb,wBAAIkH,IAAKlH,EAAE8G,GAAIG,UAAU,YACvB,4BAAQA,UAAU,WAAWjB,QAAShG,EAAEgH,IAAxC,iBACiBhH,EAAE+G,YAjCvB,EAAKX,MAAQ,CAAEjG,QAAS,GAAI6C,UAAW,IAHjB,E,qDA4Cd,IACA7C,EAAYgH,KAAKf,MAAjBjG,QAER,OACE,kBAAC,IAAMiH,SAAP,KACE,8CACA,mCACO,sCADP,oCAICD,KAAKP,YAEN,yBAAKK,UAAU,OACb,yBAAKA,UAAU,aACb,8BACEA,UAAU,eACV7F,MAAO,CAAEiG,SAAU,OAAQC,OAAQ,SACnCC,YAAa,wBACbhB,MAAOpG,EACPqH,SAAUL,KAAKd,iBAIrB,yBAAKY,UAAU,OACb,yBAAKA,UAAU,OACb,4BACEA,UAAU,kBACV9E,KAAK,SACL6D,QAASmB,KAAKnB,SAHhB,YAKW,uBAAGiB,UAAU,6B,GA9EQQ,IAAMC,WC0BnCC,EAxBD,SAAC,GAYR,IAXLZ,EAWI,EAXJA,KAEAS,GASI,EAVJI,QAUI,EATJJ,UASI,IARJjB,aAQI,MARI,GAQJ,EAPJgB,EAOI,EAPJA,YAQA,OACE,2BACER,KAAMA,EACNR,MAAOA,EACPgB,YAAaA,EACbN,UAAW,eACXO,SAAU,SAACjH,GAAD,OAAOiH,EAASjH,EAAE+F,OAAOC,WCF1BoB,EAtBD,SAAC,GAUR,IATLZ,EASI,EATJA,KACAS,EAQI,EARJA,SAQI,IAPJjB,aAOI,MAPI,GAOJ,EANJgB,EAMI,EANJA,YAOA,OACE,2BACER,KAAMA,EACNR,MAAOA,EACPgB,YAAaA,EACbN,UAAW,eACXO,SAAU,SAACjH,GAAD,OAAOiH,EAASjH,EAAE+F,OAAOC,WCT1BoB,I,kBCGME,E,kDACnB,WAAY9B,GAAa,IAAD,8BACtB,cAAMA,IASR+B,QAAU,WAAO,IAELC,EACN,EAAK3B,MADP4B,KAAQD,cAEJzG,EAAI,EAAK2G,aAEf,GAAI3G,EAAE4G,OAAQ,CACZ,IAAMC,EAAU1G,OAAO2G,KAAKL,GAAejI,KAAI,SAACQ,GAC9C,OAAOyH,EAAczH,MAGjBZ,EAAO4B,EAAExB,KAAI,SAACC,GAClB,IAAMsI,EAAW,GAOjB,OALAF,EAAQrI,KAAI,SAACQ,GAEX,OADA+H,EAAEC,KAAKvI,EAAIO,KACJ,KAGF+H,KAGHA,EAAI,CACRF,EAAQrI,KAAI,SAACQ,GACX,MAAO,CAAEH,QAASG,EAAGc,MAAO,CAAEyD,KAAM,CAAEC,MAAM,SAE9CyD,OAAO7I,GAIT2B,EAAOgH,EAFc,SAEGnC,MAAK,SAACnE,GAC5BD,EACEC,EACA,oEACA,qBA5CgB,EAkDxBkG,WAAa,WAAO,IACVD,EAAS,EAAK5B,MAAd4B,KACAQ,EAAoCR,EAApCQ,QAAST,EAA2BC,EAA3BD,cAEjB,OC7DsB,SACxBU,EACAC,EACAC,GAEA,IAAI5I,EAA4B,GAC1BL,EAAc,GAmBpB,OAjBA+I,EAAM3I,KAAI,SAAC8I,EAAM5I,GACf,IAAME,EAAIF,EAAI2I,EAERE,EAAIH,EAAkBxI,EAAI,GAWhC,OATI2I,IACF9I,EAAI8I,GAAKD,GAGP1I,IAAMyI,EAAY,IACpBjJ,EAAK4I,KAAKvI,GACVA,EAAM,KAGD,KAGFL,EDoCEoJ,CAFqCd,EAAZ7H,QACV4I,MAAM,MACHhB,EAAeS,IAtDlB,EAyDxBQ,QAAU,WACR,IAAMC,EAAO,EAAKhB,aAElB,EAAKzB,SAAS,CAAEyC,UA5DM,EA+DxB5C,aAAe,SAAC/E,GACd,IACE,IAAMmH,EAAQnH,EAAEgF,OAAOC,MAAMwC,MAAM,MAEnC,EAAKvC,SAAS,CAAEiC,UAChB,MAAOhC,MApEa,EAuExByC,WAAa,SAAC5H,GACZ,IAAM0G,EAAOmB,IAAOC,GAAGC,aAAa,EAAKjD,MAAM4B,KAAM1G,GAErD,EAAKkF,SAAS,CAAEwB,UA1EM,EA6ExBsB,oBAAsB,SAACd,GACrB,OAAKA,EAIElJ,MAAMkJ,GACV/C,KAAK,MACL3F,KAAI,SAACyJ,EAAGvJ,GACP,OACE,yBAAKkH,IAAKlH,EAAGiH,UAAU,OACrB,yBAAKA,UAAU,YAAf,IAA4BjH,EAAI,GAEhC,yBAAKiH,UAAU,YACb,kBAAC,EAAD,CACEF,KAAM,kBAAoB/G,EAAI,GAC9BwH,SAAU,EAAK0B,kBAblB,MA5ET,EAAK9C,MAAQ,CACXoC,QAAS,EACTR,KAAM,CAAED,cAAe,IACvBkB,KAAM,MANc,E,yDAoGV,IACJA,EAAS9B,KAAKf,MAAd6C,KAER,OAAKA,EAKH,yBAAKhC,UAAU,OACb,yBAAKA,UAAU,YACb,8BAAOhE,KAAKC,UAAU+F,EAAM,KAAM,MAN/B,O,+BAYD,IAAD,EACiB9B,KAAKf,MAArBqC,EADD,EACCA,MACAD,EAFD,EACQR,KACPQ,QAEFZ,EAAUtI,MAAM,KACnBmG,KAAK,MACL3F,KAAI,SAACiC,EAAG/B,GACP,MAAO,CAAE8G,GAAI9G,EAAI,EAAG+G,KAAM/G,EAAI,MAGlC,OACE,kBAAC,IAAMoH,SAAP,KACE,6CACA,sEAEA,yBAAKH,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,CACEM,YAAa,sCACbR,KAAK,UACLR,MAAOkC,EACPjB,SAAUL,KAAK+B,eAKrB,yBAAKjC,UAAU,OACb,yBAAKA,UAAU,YACb,kBAAC,EAAD,CACEF,KAAM,UACNS,SAAUL,KAAK+B,WACftB,QAASA,MAKdT,KAAKmC,oBAAoBd,GAE1B,yBAAKvB,UAAU,OACb,yBAAKA,UAAU,OACb,4BACEA,UAAU,kBACV9E,KAAK,SACL6D,QAASmB,KAAKW,SAHhB,YAKW,uBAAGb,UAAU,sBAN1B,OASE,4BACEA,UAAU,kBACV9E,KAAK,SACL6D,QAASmB,KAAK6B,SAHhB,QAKO,uBAAG/B,UAAU,uBAKvBE,KAAKqC,kB,GA/K0B/B,IAAMC,WERzB5B,E,kDACnB,WAAYC,GAAa,IAAD,8BACtB,cAAMA,IAKRC,QAAU,WAAO,IACP7F,EAAY,EAAKiG,MAAjBjG,QAERgG,EAAYhG,IATU,EAYxBkG,aAAe,SAAC/E,GACd,IACE,IAAMnB,EAAUmB,EAAEgF,OAAOC,MAEzB,EAAKC,SAAS,CAAErG,YAChB,MAAOsG,MAjBa,EAoBxBC,YAAc,SAACnC,GACb,IAAMvB,EAAY2D,EAAapC,GAC/B,EAAKiC,SAAS,CAAErG,QAASgG,EAAmBnD,MAtBtB,EAyBxB4D,UAAY,WACV,IAAMC,EAAO,CAAC,CAAEC,GAAI,EAAGC,KAAM,aAAcC,GAAI,kBAAM,EAAKN,YAAY,MAUtE,OAAO,wBAAIO,UAAU,OAAOJ,EAAK/G,KARlB,SAACE,GAAD,OACb,wBAAIkH,IAAKlH,EAAE8G,GAAIG,UAAU,YACvB,4BAAQA,UAAU,WAAWjB,QAAShG,EAAEgH,IAAxC,iBACiBhH,EAAE+G,YA5BvB,EAAKX,MAAQ,CAAEjG,QAAS,GAAI6C,UAAW,IAHjB,E,qDAuCd,IACA7C,EAAYgH,KAAKf,MAAjBjG,QAER,OACE,kBAAC,IAAMiH,SAAP,KACE,mCACA,mCACO,sCADP,iCAICD,KAAKP,YAEN,yBAAKK,UAAU,OACb,yBAAKA,UAAU,aACb,8BACEA,UAAU,eACV7F,MAAO,CAAEiG,SAAU,OAAQC,OAAQ,SACnCC,YAAa,wBACbhB,MAAOpG,EACPqH,SAAUL,KAAKd,iBAIrB,yBAAKY,UAAU,OACb,yBAAKA,UAAU,OACb,4BACEA,UAAU,kBACV9E,KAAK,SACL6D,QAASmB,KAAKnB,SAHhB,YAKW,uBAAGiB,UAAU,uB,GAtEQQ,IAAMC,WCSrC+B,EAAY,SAAChB,GACxB,IAAI1I,EAAa,CAAEI,QAAS,IACtBT,EAAO,GACTM,EAAI,EA4BR,OA1BAyI,EAAM3I,KAAI,SAAC8I,GAGT,OAFA5I,GAAK,EAEQ,KAAT4I,GACFlJ,EAAK4I,KAAKvI,GACVC,EAAI,EACJD,EAAM,CAAEI,QAAS,KACV,GAGC,IAANH,GACFD,EAAI2J,IAAMC,OAAOf,IACV,GAGC,IAAN5I,GACFD,EAAI6J,UAAYhB,GACT,IAGT7I,EAAII,QAAQmI,KAAKM,IAEV,MAGTlJ,EAAK4I,KAAKvI,GACHL,GAGImK,EAAgB,SAAC3J,GAC5B,MAAO,CACL,GACAA,EAAE0J,UAAY,WACd1J,EAAEC,QAAQL,KAAI,SAACiC,GAAD,MAAO,IAAMA,EAAI,OAAK+H,KAAK,OACzCA,KAAK,OAGIC,EAAY,SAAC7J,GACxB,IAAMmI,EAAInI,EAAEJ,IAAI+J,GAMhB,MAJU,CAAC,UAAUtB,OAAOF,GAEhByB,KAAK,O,kBCpDbE,EAA4B,SAAAC,GAChC,IAAMC,EAAM,IAAIC,IAGhBF,EAAOnK,KAAI,SAAAT,GAAM,IACP4C,EAAsB5C,EAAtB4C,SAAU9B,EAAYd,EAAZc,QAUlB,OARA+J,EAAIvG,KAAK1B,EAAU9B,GAEnB+J,EAAIE,cAAc,CAACjI,KAAK,SACvB+D,MAAK,SAAS/F,GACX,IAAMmC,EAAMC,OAAOC,IAAIC,gBAAgBtC,GACvCoC,OAAO8H,SAAW/H,MAGf,MAII,aACb,IAAMkF,EAAQ,uCAAG,WAAM8C,GAAN,iBAAAhJ,EAAA,6DACPiJ,EAAUD,EAAMhE,OAAhBiE,MADO,SAIC3G,QAAQ4G,IAAIlL,MAAMmL,KAAKF,GAAOzK,IAAlB,uCAAsB,WAAM6D,GAAN,qBAAArC,EAAA,sEAE7B6E,EAAexC,GAFc,cAE1CM,EAF0C,OAGhDyG,QAAQC,IAAIhH,EAAKoD,MAEX7G,EAAI0K,EAAmB3G,EAAK8E,MAAM,SAClC5I,EAAUyK,EAAmB1K,GAhChB2K,EAkCQlH,EAAKoD,KAA1B9E,EAlCkB4I,EAAEC,QAAQ,WAAY,QA0BE,kBAUzC,CAAC7I,WAAU9B,YAV8B,iCA1B7B,IAAA0K,IA0B6B,OAAtB,wDAJb,OAITxC,EAJS,OAiBf2B,EAA0B3B,GAjBX,2CAAH,sDAoCd,OAAQ,oCACN,2BAAOlG,KAAK,OAAO4E,KAFR,OAEoBgE,SAAS,WAAWvD,SAAUA,IAC7D,4BAAQP,UAAU,kBAAkB9E,KAAK,SAAS6D,QAlBhC,SAAA1E,GAGhB0J,MAAM,wBAGR,IACE,IAAM9K,EAAI0K,EANC,KAMuB7B,MAAM,SAClC3F,EAAMwH,EAAmB1K,GAC/BiG,EAAkB/C,GAClB,MAAOqD,GACPiE,QAAQC,IAAIlE,MAOd,YACW,uBAAGQ,UAAU,kBC/Db,aAAO,IAAD,EACOQ,IAAMwD,SAAS,MADtB,mBACXhH,EADW,KACLiH,EADK,KAsBnB,OAAQ,oCACN,2BAAO/I,KAAK,OAAO4E,KAFR,OAEoBS,SArBhB,SAAA8C,GACf,IAAM3G,EAAO2G,EAAMhE,OAAOiE,MAAM,GAChCpE,EAAexC,GAAMuC,KAAKgF,MAoB1B,4BAAQjE,UAAU,kBAAkB9E,KAAK,SAAS6D,QAjBhC,SAAA1E,GACL,OAAT2C,GACF+G,MAAM,wBAGR,IACE,IAAM9K,EAAI0K,EAAmB3G,EAAK8E,MAAM,SAClC3F,EAAMwH,EAAmB1K,GAC/BiG,EAAkB/C,GAClB,MAAOqD,GACPiE,QAAQC,IAAIlE,MAOd,YACW,uBAAGQ,UAAU,kBCzBb,aACb,OAAO,yBAAKA,UAAU,OACpB,yBAAKA,UAAU,YACb,2CACA,kBAAC,EAAD,OAEF,yBAAKA,UAAU,YACb,8CACA,kBAAC,EAAD,S,QCTA7F,EAAQ,CACZ+J,UAAW,oBACXC,aAAc,oBACdC,UAAW,sCAGE,cAAsC,IAAnCC,EAAkC,EAAlCA,SAChB,OACE,kBAAC,IAAMlE,SAAP,KACE,gCACE,yBACEhG,MAAOA,EACP6F,UAAU,+EAEV,wBAAIA,UAAU,sCACZ,kBAAC,IAAD,CAAMsE,GAAG,KAAT,iBAEF,yBAAKtE,UAAU,wBACb,kBAAC,IAAD,CAAMA,UAAU,gBAAgBsE,GAAG,WAAnC,gBAGA,kBAAC,IAAD,CAAMtE,UAAU,gBAAgBsE,GAAG,UAAnC,iBAGA,kBAAC,IAAD,CAAMtE,UAAU,gBAAgBsE,GAAG,QAAnC,OAGA,kBAAC,IAAD,CAAMtE,UAAU,gBAAgBsE,GAAG,aAAnC,iBAON,0BAAMC,KAAK,QACT,yBAAKvE,UAAU,aAAaqE,MC3B9BG,EAAMC,2CAENC,EAAU,kBACd,6BACE,mEAEA,2BACE,uBAAG/I,KAAK,6CACN,uBAAGqE,UAAU,eADf,WAEK,IAHP,gCAOA,2BACE,+BACE,uBAAGrE,KAAM,oDAAsD6I,GAC5DA,OAOLG,GAAUC,IAA6B,CAC3CC,SAAUJ,mBAGSK,G,uKAEjB,OACE,kBAAC,IAAD,CAAQH,QAASA,IACf,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,OAAK,EAACC,KAAK,UAAUC,UAAW,kBAAM,kBAAC,EAAD,SAC7C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,SAASC,UAAW,kBAAM,kBAAC,EAAD,SAC5C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,OAAOC,UAAW,kBAAM,kBAAC,EAAD,SAC1C,kBAAC,IAAD,CAAOF,OAAK,EAACC,KAAK,YAAYC,UAAW,kBAAM,kBAAC,EAAD,SAC/C,kBAAC,IAAD,CAAOA,UAAW,kBAAM,kBAAC,EAAD,gB,GAVHzE,IAAMC,WC3BnByE,QACW,cAA7B5J,OAAO8H,SAAS+B,UAEe,UAA7B7J,OAAO8H,SAAS+B,UAEhB7J,OAAO8H,SAAS+B,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,GAAD,MAAY7J,SAAS8J,eAAe,SD4H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzG,MAAK,SAAA0G,GACjCA,EAAaC,iB","file":"static/js/main.023926e4.chunk.js","sourcesContent":["import xl from \"excel4node\";\n\ntype Ws = any;\ntype Val = any;\n\nconst getCell = (\n  ws: Ws,\n  i: number,\n  j: number,\n  merged: { v: number; h: number } | false = false\n) => {\n  if (merged) {\n    const mergeI = i + 1 + merged.v;\n    const mergeJ = j + 1 + merged.h;\n    return ws.cell(i + 1, j + 1, mergeI, mergeJ, true);\n  }\n\n  return ws.cell(i + 1, j + 1);\n};\n\nexport const getMerged = (val: any) => {\n  if (\n    val.merged &&\n    typeof val.merged.h === \"number\" &&\n    typeof val.merged.v === \"number\"\n  ) {\n    return val.merged;\n  }\n\n  return false;\n};\n\nexport const isLink = (l: string): boolean =>\n  l.startsWith(\"http://\") || l.startsWith(\"https://\");\n\n// https://stackoverflow.com/questions/643782/how-to-check-whether-an-object-is-a-date\nexport const isDate = (d: any): boolean => d instanceof Date; //typeof d.getMilliseconds === 'function' && Object.prototype.toString.call(d) === '[object Date]';\n\nexport const isObjectAndNotArray = (\n  c: Val[][] | { [key: string]: Val[][] }\n): c is Val[][] => {\n  return !(typeof c === \"object\" && !Array.isArray(c));\n};\n\nconst worksheet = (wb: Ws, rows: Val[][], worksheetName: string) => {\n  const ws = wb.addWorksheet(worksheetName);\n\n  // go through `rows`\n  rows.map((row, i) => {\n    // go through `columns`\n    row.map((val, j) => {\n      if (typeof val !== \"object\") {\n        // reassign val\n        val = { content: val };\n      }\n\n      const merged = getMerged(val);\n\n      const cell = getCell(ws, i, j, merged);\n\n      switch (typeof val.content) {\n        case \"number\":\n          cell.number(val.content);\n          break;\n        case \"string\":\n          if (isLink(val.content)) {\n            cell.link(val.content);\n          } else {\n            cell.string(val.content);\n          }\n          break;\n        case \"object\":\n          if (isDate(val.content)) {\n            cell.date(val.content);\n          } else {\n            cell.string(val.content);\n          }\n          break;\n        case \"boolean\":\n          cell.bool(val.content);\n          break;\n        default:\n          cell.string(\"N/A\");\n          break;\n      }\n\n      if (val.style) {\n        cell.style(val.style);\n      }\n\n      return true;\n    });\n    return true;\n  });\n\n  return true;\n};\n\n/**\n * creates xlsx from rows\n * @param  rows : array of arrays. Note that if the cell can be formatted by passing an objet instead of a string, e.g. {content: 'content of the string', color: 'red', bold: true}\n * @param worksheetName : name of the worksheet\n */\nexport const toXlsx = async (\n  content: Val[][] | { [key: string]: Val[][] },\n  worksheetName: string = \"Sheet1\"\n) => {\n  const wb: Ws = new xl.Workbook();\n\n  if (!isObjectAndNotArray(content)) {\n    Object.entries(content).forEach(([k, rows]) => worksheet(wb, rows, k));\n  } else {\n    worksheet(wb, content, worksheetName);\n  }\n\n  return await wb.writeToBuffer();\n};\n","// have this in material package?\nexport const bitToBlob = (x: BlobPart, type: string) => new Blob([x], { type });\n\nexport const serveFile = (\n  x: BlobPart,\n  contentType: string,\n  filename: string\n) => {\n  const b = bitToBlob(x, contentType);\n  const url = window.URL.createObjectURL(b);\n\n  /*\n  new Promise((resolve) => {\n  resolve((window.location.href = url));\n});*/\n\n  const a = document.createElement(\"a\");\n  a.href = url;\n  a.setAttribute(\"download\", filename);\n  a.click();\n};\n","import { toXlsx } from \"./lib/tabular-xlsx\";\nimport * as Csv from \"./lib/csv\";\nimport { serveFile } from \"./lib/utils\";\n\nexport const formatJsArray = (js: any) => {\n  if (!Array.isArray(js) || js.length === 0) {\n    return [];\n  }\n\n  return (\n    \"[\\n\\t\" +\n    js\n      .map((row) => {\n        return JSON.stringify(row);\n      })\n      .reduce((a, b) => a + \",\\n\\t\" + b) +\n    \"\\n]\"\n  );\n};\n\nexport const jsonBeautify = (jsContent: any) =>\n  JSON.stringify(jsContent, null, \"  \");\n\nexport const toExport = (content: string, workbookName = \"MyWorkBook\") => {\n  const jsContent = JSON.parse(content);\n\n  toXlsx(jsContent, workbookName).then((x) => {\n    serveFile(\n      x,\n      \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n      \"sample.xlsx\"\n    );\n  });\n};\n\nexport const toExportTxt = (txt: string) =>\n  serveFile(txt, \"application/octet-stream\", \"sample.txt\");\n\nexport const toCsv = (content: any) => {\n  const jsContent = JSON.parse(content);\n  const x = Csv.to(jsContent);\n  serveFile(x, \"application/csv\", \"sample.csv\");\n};\n\n/**\n * read file asynchronously\n * @param {*} file\n * some references regrding files upload in HTML\n * @see https://stackoverflow.com/questions/24843508/filereader-error-the-object-is-already-busy-reading-blobs\n * @see https://stackoverflow.com/questions/25333488/why-isnt-the-filelist-object-an-array\n * @see https://stackoverflow.com/questions/1593225/how-to-select-multiple-files-with-input-type-file\n */\nexport const readFile = (file: File) => {\n  return new Promise((resolve) => {\n    const fileReader = new FileReader();\n    fileReader.onloadend = (a) => {\n      const data = fileReader.result;\n      resolve(data);\n    };\n\n    fileReader.readAsText(file);\n  });\n};\n","export const to = (rows: any[][], separator = \",\") => {\n  return rows\n    .map((row) => {\n      return row\n        .map((x) => JSON.stringify(x))\n        .reduce((a, b) => a + separator + b);\n    })\n    .reduce((a, b) => a + \"\\n\" + b);\n};\n","/**\n * list of examples\n */\n\nimport users from \"./users.json\";\nimport multiPageImport from \"./multi-page.json\";\n\ntype Status = \"ok\" | \"inactive\" | \"pending\";\n\ninterface CellStyle {\n  font?: {\n    bold?: boolean;\n    color?: string;\n  };\n  fill?: {\n    type?: string;\n    patternType?: string;\n    fgColor?: string;\n  };\n}\n\ninterface CellUnit {\n  content: string | number;\n  style: CellStyle;\n}\n\nexport const colorByStatus = (\n  status: Status\n): \"red\" | \"orange\" | \"green\" | undefined => {\n  if (status === \"ok\") return \"green\";\n  if (status === \"inactive\") return \"red\";\n  if (status === \"pending\") return \"orange\";\n\n  return;\n};\n\n// for some reason with initialization when used like this.\n//export const maleOrFemale = () => Math.round(Math.random());\n\nexport const randomInteger = () => Math.ceil(1000 * Math.random());\n\nexport const usersSimple = (): (CellUnit[] | string[])[] => {\n  const n = 10;\n  const jsContent: string[][] = users.splice(0, n).map((user) => {\n    return [user.firstName, user.lastName];\n  });\n\n  const headers: CellUnit[] = [\"first name\", \"last name\"].map((x) => {\n    return {\n      content: x,\n      style: { font: { bold: true } },\n    };\n  });\n\n  return [headers, ...jsContent];\n};\n\nexport const usersAdvanced = (): (CellUnit | string)[][] => {\n  const styleBoldAndBlue: CellStyle = { font: { color: \"blue\", bold: true } };\n\n  return users.map((user) => {\n    const style: CellStyle = {\n      font: { color: colorByStatus(user.status as Status) },\n    };\n    const status = { content: user.status, style: style };\n    const age = { content: randomInteger(), style: styleBoldAndBlue };\n    const maleOrFemaleInt = Math.round(Math.random()); //maleOrFemale();\n    const maleOrFemaleText = maleOrFemaleInt === 1 ? \"Male\" : \"Female\";\n    const maleOrFemaleColor = maleOrFemaleInt === 1 ? \"blue\" : \"pink\";\n    const maleOrFemale: CellUnit = {\n      content: maleOrFemaleText,\n      style: {\n        fill: {\n          type: \"pattern\",\n          patternType: \"solid\",\n          fgColor: maleOrFemaleColor,\n        },\n        font: { color: \"white\" },\n      },\n    };\n\n    const r: (CellUnit | string)[] = [\n      user.firstName,\n      user.lastName,\n      status,\n      age,\n      maleOrFemale,\n    ];\n\n    return r;\n  });\n};\n\nexport const multiPage = (): {\n  [key: string]: (CellUnit | string)[][];\n} => multiPageImport;\n\nexport const merge = () => [\n  [\n    {\n      content: \"merged\",\n      merged: { v: 1, h: 2 },\n    },\n  ],\n  [], // empty row here that will be filled with merged\n  [4, 5, \"https://google.com\"],\n];\n\nexport const simpleCsv = (): (string | number)[][] => [\n  [\"a\", 1],\n  [\"c\", \"d\"],\n  [\"e\", \"f\"],\n];\n\nexport const load = (exampleId: number) => {\n  switch (exampleId) {\n    case 1:\n      return usersSimple();\n    case 2:\n      return usersAdvanced();\n    case 3:\n      return multiPage();\n    case 4:\n      return merge();\n    case 5:\n      return simpleCsv();\n    default:\n      break;\n  }\n};\n","import React from \"react\";\n\nimport * as Utils from \"./utils\";\nimport * as Example from \"./examples/index\";\n\nexport default class TableGenerator extends React.Component<\n  {},\n  { jsContent: string[]; content: string }\n> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = { content: \"\", jsContent: [] };\n  }\n\n  onClick = () => {\n    const { content } = this.state;\n\n    Utils.toExport(content);\n  };\n\n  handleChange = (a: { target: { value: string } }) => {\n    try {\n      const content = a.target.value;\n\n      this.setState({ content });\n    } catch (err) {}\n  };\n\n  loadExample = (exampleId: number) => {\n    const jsContent = Example.load(exampleId);\n    this.setState({ content: Utils.jsonBeautify(jsContent) });\n  };\n\n  renderNav = () => {\n    const navs = [\n      { id: 1, name: \"user simple\", fx: () => this.loadExample(1) },\n      { id: 2, name: \"user advanced\", fx: () => this.loadExample(2) },\n      { id: 3, name: \"multi page\", fx: () => this.loadExample(3) },\n      { id: 4, name: \"merge\", fx: () => this.loadExample(4) },\n    ];\n\n    const toLine = (i: { id: number; fx: any; name: string }) => (\n      <li key={i.id} className=\"nav-item\">\n        <button className=\"nav-link\" onClick={i.fx}>\n          Load example #{i.name}\n        </button>\n      </li>\n    );\n\n    return <ul className=\"nav\">{navs.map(toLine)}</ul>;\n  };\n\n  render() {\n    const { content } = this.state;\n\n    return (\n      <React.Fragment>\n        <h1>Tabular Export</h1>\n        <p>\n          Turn <code>JSON</code> lists into Excel files (.xlsx).\n        </p>\n\n        {this.renderNav()}\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <textarea\n              className=\"form-control\"\n              style={{ minWidth: \"100%\", height: \"400px\" }}\n              placeholder={\"insert your json here\"}\n              value={content}\n              onChange={this.handleChange}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-primary\"\n              type=\"submit\"\n              onClick={this.onClick}\n            >\n              Download <i className=\"fa fa-file-excel\" />\n            </button>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\ninterface Option {\n  id: number;\n  name: number;\n}\n\nconst Input = ({\n  name,\n  options,\n  onChange,\n  value = \"\",\n  placeholder,\n}: {\n  name: string;\n  options: Option[];\n  onChange: (a: string) => void;\n  value?: string;\n  placeholder?: string;\n}) => {\n  return (\n    <input\n      name={name}\n      value={value}\n      placeholder={placeholder}\n      className={\"form-control\"}\n      onChange={(v) => onChange(v.target.value)}\n    />\n  );\n};\n\nexport default Input;\n","import React from \"react\";\n\nconst Input = ({\n  name,\n  onChange,\n  value = \"\",\n  placeholder,\n}: {\n  name: string;\n  onChange: (a: string) => void;\n  value?: string;\n  placeholder?: string;\n}) => {\n  return (\n    <input\n      name={name}\n      value={value}\n      placeholder={placeholder}\n      className={\"form-control\"}\n      onChange={(v) => onChange(v.target.value)}\n    />\n  );\n};\n\nexport default Input;\n","import Input from \"./input\";\n\n/**\n * <textarea\n  class=\"form-control\"\n  placeholder=\"insert your json here\"\n  style=\"min-width: 100%; height: 400px;\"\n></textarea>;\n */\n\nexport default Input;\n","import React from \"react\";\n\nimport { lineToRows } from \"./lib/lines-to-rows\";\nimport { toXlsx } from \"./lib/tabular-xlsx\";\n\nimport Select from \"./components/select\";\nimport Input from \"./components/input\";\nimport Textarea from \"./components/textarea\";\n\nimport NUtils from \"@nexys/utils\";\n\nimport { serveFile } from \"./lib/utils\";\n\nexport default class LineToRows extends React.Component<{}, any> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      nSeqLen: 2,\n      form: { mapAttributes: {} },\n      json: null,\n    };\n  }\n\n  getXlsx = () => {\n    const {\n      form: { mapAttributes },\n    } = this.state;\n    const a = this.getContent();\n\n    if (a.length) {\n      const headers = Object.keys(mapAttributes).map((h) => {\n        return mapAttributes[h];\n      });\n\n      const rows = a.map((row) => {\n        const r: any[] = [];\n\n        headers.map((h) => {\n          r.push(row[h]);\n          return true;\n        });\n\n        return r;\n      });\n\n      const r = [\n        headers.map((h) => {\n          return { content: h, style: { font: { bold: true } } };\n        }),\n      ].concat(rows);\n\n      const workbookName = \"Users\";\n\n      toXlsx(r, workbookName).then((x) => {\n        serveFile(\n          x,\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n          \"linerow.xlsx\"\n        );\n      });\n    }\n  };\n\n  getContent = () => {\n    const { form } = this.state;\n    const { nSeqLen, mapAttributes, content } = form;\n    const lines = content.split(\"\\n\");\n    return lineToRows(lines, mapAttributes, nSeqLen);\n  };\n\n  getJson = () => {\n    const json = this.getContent();\n\n    this.setState({ json });\n  };\n\n  handleChange = (a: { target: { value: string } }) => {\n    try {\n      const lines = a.target.value.split(\"\\n\");\n\n      this.setState({ lines });\n    } catch (err) {}\n  };\n\n  updateForm = (a: any) => {\n    const form = NUtils.ds.updateObject(this.state.form, a);\n\n    this.setState({ form });\n  };\n\n  renderMapAttributes = (nSeqLen: any) => {\n    if (!nSeqLen) {\n      return null;\n    }\n\n    return Array(nSeqLen)\n      .fill(null)\n      .map((_, i) => {\n        return (\n          <div key={i} className=\"row\">\n            <div className=\"col-sm-1\">#{i + 1}</div>\n\n            <div className=\"col-sm-2\">\n              <Input\n                name={\"mapAttributes.\" + (i + 1)}\n                onChange={this.updateForm}\n              />\n            </div>\n          </div>\n        );\n      });\n  };\n\n  renderJson() {\n    const { json } = this.state;\n\n    if (!json) {\n      return null;\n    }\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-sm-1\">\n          <code>{JSON.stringify(json, null, 2)}</code>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { lines, form } = this.state;\n    const { nSeqLen } = form;\n\n    const options = Array(100)\n      .fill(null)\n      .map((x, i) => {\n        return { id: i + 1, name: i + 1 };\n      });\n\n    return (\n      <React.Fragment>\n        <h1>Lines to Rows</h1>\n        <p>Turn multi-line encoded list in tables.</p>\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Textarea\n              placeholder={\"insert the content of the file here\"}\n              name=\"content\"\n              value={lines}\n              onChange={this.updateForm}\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-sm-3\">\n            <Select\n              name={\"nSeqLen\"}\n              onChange={this.updateForm}\n              options={options}\n            />\n          </div>\n        </div>\n\n        {this.renderMapAttributes(nSeqLen)}\n\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-primary\"\n              type=\"submit\"\n              onClick={this.getXlsx}\n            >\n              Download <i className=\"fa fa-file-excel\" />\n            </button>\n            &nbsp;\n            <button\n              className=\"btn btn-primary\"\n              type=\"submit\"\n              onClick={this.getJson}\n            >\n              JSON <i className=\"fa fa-file-code\" />\n            </button>\n          </div>\n        </div>\n\n        {this.renderJson()}\n      </React.Fragment>\n    );\n  }\n}\n","/**\n * [description]\n * @param  {[type]} lines            [description]\n * @param  {[type]} seqNLines        n lines between different sections\n * @param  {[type]} mappingFunctions map of n line:key\n * @return {[type]}                  [description]\n */\nexport const lineToRows = (\n  lines: any[],\n  mappingAttributes: { [k: string]: any },\n  seqNLines: number\n): any[] => {\n  let row: { [k: string]: any } = {};\n  const rows: any[] = [];\n\n  lines.map((line, i) => {\n    const j = i % seqNLines;\n\n    const t = mappingAttributes[j + 1];\n\n    if (t) {\n      row[t] = line;\n    }\n\n    if (j === seqNLines - 1) {\n      rows.push(row);\n      row = {};\n    }\n\n    return true;\n  });\n\n  return rows;\n};\n","import React from \"react\";\n\nimport * as Utils from \"./utils\";\nimport * as Example from \"./examples/index\";\n\nexport default class TableGenerator extends React.Component<{}, any> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = { content: \"\", jsContent: [] };\n  }\n\n  onClick = () => {\n    const { content } = this.state;\n\n    Utils.toCsv(content);\n  };\n\n  handleChange = (a: { target: { value: string } }) => {\n    try {\n      const content = a.target.value;\n\n      this.setState({ content });\n    } catch (err) {}\n  };\n\n  loadExample = (exampleId: number) => {\n    const jsContent = Example.load(exampleId);\n    this.setState({ content: Utils.jsonBeautify(jsContent) });\n  };\n\n  renderNav = () => {\n    const navs = [{ id: 5, name: \"Simple CSV\", fx: () => this.loadExample(5) }];\n\n    const toLine = (i: { id: number; fx: any; name: string }) => (\n      <li key={i.id} className=\"nav-item\">\n        <button className=\"nav-link\" onClick={i.fx}>\n          Load example #{i.name}\n        </button>\n      </li>\n    );\n\n    return <ul className=\"nav\">{navs.map(toLine)}</ul>;\n  };\n\n  render() {\n    const { content } = this.state;\n\n    return (\n      <React.Fragment>\n        <h1>CSV</h1>\n        <p>\n          Turn <code>JSON</code> lists into CSV files (.csv).\n        </p>\n\n        {this.renderNav()}\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <textarea\n              className=\"form-control\"\n              style={{ minWidth: \"100%\", height: \"400px\" }}\n              placeholder={\"insert your json here\"}\n              value={content}\n              onChange={this.handleChange}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-primary\"\n              type=\"submit\"\n              onClick={this.onClick}\n            >\n              Download <i className=\"fa fa-file\" />\n            </button>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","/**\n * [description]\n * @param  {[type]} lines            [description]\n * @param  {[type]} seqNLines        n lines between different sections\n * @param  {[type]} mappingFunctions map of n line:key\n * @return {[type]}                  [description]\n */\n\ninterface Struc {\n  content: any[];\n  idx?: number;\n  timestamp?: any;\n}\n\nexport const srtToJson = (lines: any[]) => {\n  let row: Struc = { content: [] };\n  const rows = [];\n  let i = 0;\n\n  lines.map((line) => {\n    i += 1;\n\n    if (line === \"\") {\n      rows.push(row);\n      i = 0;\n      row = { content: [] };\n      return true;\n    }\n\n    if (i === 1) {\n      row.idx = Number(line);\n      return true;\n    }\n\n    if (i === 2) {\n      row.timestamp = line;\n      return true;\n    }\n\n    row.content.push(line);\n\n    return true;\n  });\n\n  rows.push(row);\n  return rows;\n};\n\nexport const jsonUnitToVtt = (j: Struc) => {\n  return [\n    \"\",\n    j.timestamp + \" line:-1\",\n    j.content.map((x) => \" \" + x + \" \").join(\"\\n\"),\n  ].join(\"\\n\");\n};\n\nexport const jsonToVtt = (j: Struc[]) => {\n  const r = j.map(jsonUnitToVtt);\n\n  const a = [\"WEBVTT\"].concat(r);\n\n  const s = a.join(\"\\n\");\n\n  return s; //.trim();\n};\n","import React from 'react';\n\nimport * as Utils from '../utils';\nimport * as SrtToVtt from '../lib/srt-vtt';\n\nimport JSZip from 'jszip';\n\nexport const nameToVtt = f => f.replace(/\\.[^.]+$/, '.vtt');\n\nconst zipFolderFromContentArray = cArray => {\n  const zip = new JSZip();\n  // create a file and a folder\n\n  cArray.map(c => {\n    const { filename, content } = c;\n\n    zip.file(filename, content);\n\n    zip.generateAsync({type:\"blob\"})\n    .then(function(content) {\n        const url = window.URL.createObjectURL(content);\n        window.location = url;\n    });\n\n    return true;\n  })\n}\n\nexport default () => {\n  const onChange = async event => {\n    const { files } = event.target;\n\n    // this function calls `onloadend`\n    const r = await Promise.all(Array.from(files).map(async file => {\n      //fileReader.readAsText(file);\n      const data = await Utils.readFile(file)\n      console.log(file.name);\n\n      const j = SrtToVtt.srtToJson(data.split('\\r\\n'));\n      const content = SrtToVtt.jsonToVtt(j);\n\n      const filename = nameToVtt(file.name);\n\n      return {filename, content};\n    }));\n\n    zipFolderFromContentArray(r)\n  }\n  \n  const handleClick = a => {\n    const data = null;\n    if (data === null) {\n      alert('no content available')\n    }\n\n    try {\n      const j = SrtToVtt.srtToJson(data.split('\\r\\n'));\n      const txt = SrtToVtt.jsonToVtt(j);\n      Utils.toExportTxt(txt);\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const name = 'file';\n  return (<>\n    <input type=\"file\" name={name} multiple=\"multiple\" onChange={onChange}/>\n    <button className=\"btn btn-primary\" type=\"submit\" onClick={handleClick}>\n      Download <i className=\"fa fa-file\"/>\n    </button>\n  </>);\n}","import React from 'react';\n\nimport * as Utils from '../utils';\nimport * as SrtToVtt from '../lib/srt-vtt';\n\nexport default () => {\n  const [ data, setData ] = React.useState(null);\n  const onChange = event => {\n    const file = event.target.files[0];\n    Utils.readFile(file).then(setData);\n  }\n  \n  const handleClick = a => {\n    if (data === null) {\n      alert('no content available')\n    }\n\n    try {\n      const j = SrtToVtt.srtToJson(data.split('\\r\\n'));\n      const txt = SrtToVtt.jsonToVtt(j);\n      Utils.toExportTxt(txt);\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const name = 'file';\n  return (<>\n    <input type=\"file\" name={name} onChange={onChange}/>\n    <button className=\"btn btn-primary\" type=\"submit\" onClick={handleClick}>\n      Download <i className=\"fa fa-file\"/>\n    </button>\n  </>);\n}","import React from 'react';\n\nimport MultipleFiles from './multiple';\nimport OneFile from './single';\n\nexport default () => {\n  return <div className=\"row\">\n    <div className=\"col-md-6\">\n      <h3>Single File</h3>\n      <OneFile/>\n    </div>\n    <div className=\"col-md-6\">\n      <h3>Multiple Files</h3>\n      <MultipleFiles/>\n    </div>\n  </div>\n}\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nconst style = {\n  borderTop: \"1px solid #e5e5e5\",\n  borderBottom: \"1px solid #e5e5e5\",\n  boxShadow: \"0 .25rem .75rem rgba(0, 0, 0, .05)\",\n};\n\nexport default ({ children }: { children: any }) => {\n  return (\n    <React.Fragment>\n      <header>\n        <div\n          style={style}\n          className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\"\n        >\n          <h5 className=\"my-0 mr-md-auto font-weight-normal\">\n            <Link to=\"/\">Xlsx Tabular</Link>\n          </h5>\n          <nav className=\"my-2 my-md-0 mr-md-3\">\n            <Link className=\"p-2 text-dark\" to=\"/tables\">\n              Rows To Xlsx\n            </Link>\n            <Link className=\"p-2 text-dark\" to=\"/lines\">\n              Lines to rows\n            </Link>\n            <Link className=\"p-2 text-dark\" to=\"/csv\">\n              CSV\n            </Link>\n            <Link className=\"p-2 text-dark\" to=\"/srtToVtt\">\n              SRT to VTT\n            </Link>\n          </nav>\n        </div>\n      </header>\n\n      <main role=\"main\">\n        <div className=\"container\">{children}</div>\n      </main>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\n\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport * as History from \"history\";\n\nimport TableGenerator from \"./table-generator\";\nimport LinesToRows from \"./lines-rows\";\nimport Csv from \"./csv\";\nimport SrtToVtt from \"./srt-vtt/index\";\n\nimport Layout from \"./layout\";\n\nconst sha = process.env.REACT_APP_GIT_SHA || \"git_sha_undefined\";\n\nconst Default = () => (\n  <div>\n    <p>Select an option from the menu above</p>\n\n    <p>\n      <a href=\"https://github.com/Nexysweb/tabular-excel\">\n        <i className=\"fa fa-code\"></i> Source\n      </a>{\" \"}\n      available under MIT license.\n    </p>\n\n    <p>\n      <small>\n        <a href={\"https://github.com/Nexysweb/tabular-excel/commit/\" + sha}>\n          {sha}\n        </a>\n      </small>\n    </p>\n  </div>\n);\n\nconst history = History.createBrowserHistory({\n  basename: process.env.PUBLIC_URL || \"\",\n});\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Router history={history}>\n        <Layout>\n          <Switch>\n            <Route exact path=\"/tables\" component={() => <TableGenerator />} />\n            <Route exact path=\"/lines\" component={() => <LinesToRows />} />\n            <Route exact path=\"/csv\" component={() => <Csv />} />\n            <Route exact path=\"/srtToVtt\" component={() => <SrtToVtt />} />\n            <Route component={() => <Default />} />\n          </Switch>\n        </Layout>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}