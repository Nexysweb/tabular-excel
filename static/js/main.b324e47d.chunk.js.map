{"version":3,"sources":["lib/tabular-xlsx.ts","utils.js","lib/csv.ts","examples/index.js","table-generator.tsx","components/select.tsx","components/input.tsx","components/textarea.tsx","lines-rows.tsx","lib/lines-to-rows.ts","csv.tsx","lib/srt-vtt.ts","srt-vtt/multiple.js","srt-vtt/single.js","srt-vtt/index.js","layout.tsx","routes.tsx","serviceWorker.js","index.tsx"],"names":["isObjectAndNotArray","c","Array","isArray","worksheet","wb","rows","worksheetName","ws","addWorksheet","map","row","i","val","j","content","l","merged","h","v","getMerged","cell","mergeI","mergeJ","getCell","number","startsWith","link","string","Date","date","bool","style","toXlsx","a","xl","Workbook","Object","keys","k","writeToBuffer","bitToBlob","x","type","Blob","jsonBeautify","jsContent","JSON","stringify","toExportTxt","txt","b","url","window","URL","createObjectURL","Promise","resolve","location","toCsv","separator","reduce","Csv","parse","readFile","file","fileReader","FileReader","onloadend","data","result","readAsText","colorByStatus","status","load","exampleId","users","splice","user","firstName","lastName","headers","font","bold","unshift","usersSimple","styleBoldAndBlue","color","age","Math","ceil","random","maleOrFemaleInt","round","maleOrFemale","fill","patternType","fgColor","usersAdvanced","multiPageImport","TableGenerator","props","onClick","workbookName","then","Utils","state","handleChange","target","value","setState","err","loadExample","Example","renderNav","navs","id","name","fx","className","key","this","Fragment","minWidth","height","placeholder","onChange","React","Component","Input","options","LineToRows","getXlsx","mapAttributes","form","getContent","length","r","push","concat","href","nSeqLen","lines","mappingAttributes","seqNLines","line","t","lineToRows","split","getJson","json","updateForm","NUtils","ds","updateObject","renderMapAttributes","_","renderJson","srtToJson","idx","Number","timestamp","jsonUnitToVtt","join","jsonToVtt","zipFolderFromContentArray","cArray","zip","JSZip","filename","generateAsync","event","files","all","from","console","log","SrtToVtt","f","replace","multiple","alert","useState","setData","borderTop","borderBottom","boxShadow","children","to","role","sha","process","Default","history","History","basename","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b324e47d.chunk.js","sourcesContent":["import xl from \"excel4node\";\n\ntype Ws = any;\ntype Val = any;\n\nconst getCell = (\n  ws: Ws,\n  i: number,\n  j: number,\n  merged: { v: number; h: number } | false = false\n) => {\n  if (merged) {\n    const mergeI = i + 1 + merged.v;\n    const mergeJ = j + 1 + merged.h;\n    return ws.cell(i + 1, j + 1, mergeI, mergeJ, true);\n  }\n\n  return ws.cell(i + 1, j + 1);\n};\n\nexport const getMerged = (val: any) => {\n  if (\n    val.merged &&\n    typeof val.merged.h === \"number\" &&\n    typeof val.merged.v === \"number\"\n  ) {\n    return val.merged;\n  }\n\n  return false;\n};\n\nexport const isLink = (l: string): boolean =>\n  l.startsWith(\"http://\") || l.startsWith(\"https://\");\n\n// https://stackoverflow.com/questions/643782/how-to-check-whether-an-object-is-a-date\nexport const isDate = (d: any): boolean => d instanceof Date; //typeof d.getMilliseconds === 'function' && Object.prototype.toString.call(d) === '[object Date]';\n\nexport const isObjectAndNotArray = (c: any): boolean =>\n  typeof c === \"object\" && !Array.isArray(c);\n\nconst worksheet = (wb: any, rows: Val[][], worksheetName: string) => {\n  const ws = wb.addWorksheet(worksheetName);\n\n  // go through `rows`\n  rows.map((row, i) => {\n    // go through `columns`\n    row.map((val, j) => {\n      if (typeof val !== \"object\") {\n        // reassign val\n        val = { content: val };\n      }\n\n      const merged = getMerged(val);\n\n      const cell = getCell(ws, i, j, merged);\n\n      switch (typeof val.content) {\n        case \"number\":\n          cell.number(val.content);\n          break;\n        case \"string\":\n          if (isLink(val.content)) {\n            cell.link(val.content);\n          } else {\n            cell.string(val.content);\n          }\n          break;\n        case \"object\":\n          if (isDate(val.content)) {\n            cell.date(val.content);\n          } else {\n            cell.string(val.content);\n          }\n          break;\n        case \"boolean\":\n          cell.bool(val.content);\n          break;\n        default:\n          cell.string(\"N/A\");\n          break;\n      }\n\n      if (val.style) {\n        cell.style(val.style);\n      }\n\n      return true;\n    });\n    return true;\n  });\n\n  return true;\n};\n\n/**\n * creates xlsx from rows\n * @param  rows : array of arrays. Note that if the cell can be formatted by passing an objet instead of a string, e.g. {content: 'content of the string', color: 'red', bold: true}\n * @param worksheetName : name of the worksheet\n */\nexport const toXlsx = async (content: any, worksheetName: string = 'Sheet1') => {\n  const wb = new xl.Workbook();\n\n  if (isObjectAndNotArray(content)) {\n    Object.keys(content).map((k) => {\n      const rows = content[k];\n\n      worksheet(wb, rows, k);\n\n      return true;\n    });\n  } else {\n    worksheet(wb, content, worksheetName);\n  }\n\n  return await wb.writeToBuffer();\n};\n","import { toXlsx } from './lib/tabular-xlsx';\nimport * as Csv from './lib/csv';\n\nexport const bitToBlob = (x, type) => new Blob([x], {type});\n\nexport const formatJsArray = (js) => {\n  if (!Array.isArray(js) || js.length === 0) {\n    return [];\n  }\n\n  return '[\\n\\t' + js.map(row => {\n    return JSON.stringify(row)\n  }).reduce((a, b) => a + ',\\n\\t' + b) + '\\n]';\n}\n\nexport const jsonBeautify = jsContent => JSON.stringify(jsContent,null,'  ');\n\nexport const toExport = (content, workbookName = 'MyWorkBook') => {\n  const jsContent = JSON.parse(content);\n\n  toXlsx(jsContent, workbookName).then(x => {\n    const b = bitToBlob(x, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n    const url = window.URL.createObjectURL(b);\n\n    // change filename\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition\n    // Content-Disposition: inline\n    // Content-Disposition: attachment\n    // Content-Disposition: attachment; filename=\"filename.jpg\"\n\n    window.location = url;\n  });\n}\n\nexport const toExportTxt = txt => {\n  const b = bitToBlob(txt, 'application/octet-stream');\n  const url = window.URL.createObjectURL(b);\n\n  new Promise(resolve => {\n    resolve(window.location = url)\n  })\n}\n\nexport const toCsv = (content) => {\n  const jsContent = JSON.parse(content);\n  const x = Csv.to(jsContent)\n  const b = bitToBlob(x, 'text/csv');\n  const url = window.URL.createObjectURL(b);\n\n  // change filename\n  // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition\n  // Content-Disposition: inline\n  // Content-Disposition: attachment\n  // Content-Disposition: attachment; filename=\"filename.jpg\"\n\n  window.location = url;\n}\n\n/**\n * read file asynchronously\n * @param {*} file \n * some references regrding files upload in HTML\n * @see https://stackoverflow.com/questions/24843508/filereader-error-the-object-is-already-busy-reading-blobs\n * @see https://stackoverflow.com/questions/25333488/why-isnt-the-filelist-object-an-array\n * @see https://stackoverflow.com/questions/1593225/how-to-select-multiple-files-with-input-type-file\n */\nexport const readFile = file => {\n  return new Promise(resolve => {\n    const fileReader = new FileReader();\n    fileReader.onloadend = a => {\n      const data = fileReader.result;\n      resolve(data);\n    };\n\n    fileReader.readAsText(file);\n  });\n}","export const to = (rows: any[][], separator = \",\") => {\n  return rows\n    .map((row) => {\n      return row\n        .map((x) => JSON.stringify(x))\n        .reduce((a, b) => a + separator + b);\n    })\n    .reduce((a, b) => a + \"\\n\" + b);\n};\n","/**\n * list of examples\n */\n\nimport users from './users.json';\nimport multiPageImport from './multi-page.json';\n\nexport const colorByStatus = status => {\n  if (status === 'ok') return 'green';\n  if (status === 'inactive') return 'red';\n  if (status === 'pending') return 'orange';\n\n  return null;\n}\n\n// for some reason with initialization when used like this.\n//export const maleOrFemale = () => Math.round(Math.random());\n\nexport const randomInteger = () => Math.ceil(1000*Math.random());\n\nexport const usersSimple = () => {\n  const n = 10;\n  const jsContent = users.splice(0, n).map(user => {\n    return [user.firstName, user.lastName];\n  });\n\n  const headers = ['first name', 'last name'].map(x => {\n    return {\n      content: x,\n      style: {font: {bold: true}}\n    }\n  });\n\n  jsContent.unshift(headers);\n\n  return jsContent;\n}\n\nexport const usersAdvanced = () => {\n  const styleBoldAndBlue = {font: {color: 'blue', bold: true}};\n\n  const jsContent = users.map(user => {\n    const style = {font: {color: colorByStatus(user.status)}};\n    const status = {content: user.status, style: style};\n    const age = {content: randomInteger(), style: styleBoldAndBlue};\n    const maleOrFemaleInt = Math.round(Math.random());//maleOrFemale();\n    const maleOrFemaleText = maleOrFemaleInt === 1 ? 'Male' : 'Female';\n    const maleOrFemaleColor = maleOrFemaleInt === 1 ? 'blue' : 'pink';\n    const maleOrFemale = {\n      content: maleOrFemaleText,\n      style:{\n        fill:{ type: 'pattern', patternType: 'solid', fgColor: maleOrFemaleColor },\n        font: { color: 'white' }\n      }\n    };\n\n    return [user.firstName, user.lastName, status, age, maleOrFemale];\n  });\n\n  return jsContent;\n}\n\nexport const multiPage = () => {\n  const jsContent = multiPageImport;\n\n  return jsContent;\n}\n\nexport const merge = () => {\n  return [\n    [{\n      \"content\": \"merged\",\n      \"merged\": {\"v\": 1, \"h\": 2}\n    }\n    ],\n    [], // empty row here that will be filled with merged\n    [4, 5, 'https://google.com']\n  ];\n}\n\nexport const simpleCsv = () => {\n  return [\n    ['a', 1],\n    ['c', 'd'],\n    ['e', 'f']\n  ]\n}\n\nexport const load = exampleId => {\n  switch (exampleId) {\n    case 1:\n      return usersSimple();\n    case 2:\n      return usersAdvanced();\n    case 3:\n      return multiPage();\n    case 4:\n      return merge();\n    case 5:\n     return simpleCsv();\n    default:\n      break;\n  }\n}\n\n","import React from \"react\";\n\nimport * as Utils from \"./utils\";\nimport * as Example from \"./examples/index\";\n\nexport default class TableGenerator extends React.Component<\n  {},\n  { jsContent: string[]; content: string }\n> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = { content: \"\", jsContent: [] };\n  }\n\n  onClick = () => {\n    const { content } = this.state;\n\n    Utils.toExport(content);\n  };\n\n  handleChange = (a: { target: { value: string } }) => {\n    try {\n      const content = a.target.value;\n\n      this.setState({ content });\n    } catch (err) {}\n  };\n\n  loadExample = (exampleId: number) => {\n    const jsContent = Example.load(exampleId);\n    this.setState({ content: Utils.jsonBeautify(jsContent) });\n  };\n\n  renderNav = () => {\n    const navs = [\n      { id: 1, name: \"user simple\", fx: () => this.loadExample(1) },\n      { id: 2, name: \"user advanced\", fx: () => this.loadExample(2) },\n      { id: 3, name: \"multi page\", fx: () => this.loadExample(3) },\n      { id: 4, name: \"merge\", fx: () => this.loadExample(4) },\n    ];\n\n    const toLine = (i: { id: number; fx: any; name: string }) => (\n      <li key={i.id} className=\"nav-item\">\n        <button className=\"nav-link\" onClick={i.fx}>\n          Load example #{i.name}\n        </button>\n      </li>\n    );\n\n    return <ul className=\"nav\">{navs.map(toLine)}</ul>;\n  };\n\n  render() {\n    const { content } = this.state;\n\n    return (\n      <React.Fragment>\n        <h1>Tabular Export</h1>\n        <p>\n          Turn <code>JSON</code> lists into Excel files (.xlsx).\n        </p>\n\n        {this.renderNav()}\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <textarea\n              className=\"form-control\"\n              style={{ minWidth: \"100%\", height: \"400px\" }}\n              placeholder={\"insert your json here\"}\n              value={content}\n              onChange={this.handleChange}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-primary\"\n              type=\"submit\"\n              onClick={this.onClick}\n            >\n              Download <i className=\"fa fa-file-excel\" />\n            </button>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","import React from \"react\";\n\ninterface Option {\n  id: number;\n  name: number;\n}\n\nconst Input = ({\n  name,\n  options,\n  onChange,\n  value = \"\",\n  placeholder,\n}: {\n  name: string;\n  options: Option[];\n  onChange: (a: string) => void;\n  value?: string;\n  placeholder?: string;\n}) => {\n  return (\n    <input\n      name={name}\n      value={value}\n      placeholder={placeholder}\n      className={\"form-control\"}\n      onChange={(v) => onChange(v.target.value)}\n    />\n  );\n};\n\nexport default Input;\n","import React from \"react\";\n\nconst Input = ({\n  name,\n  onChange,\n  value = \"\",\n  placeholder,\n}: {\n  name: string;\n  onChange: (a: string) => void;\n  value?: string;\n  placeholder?: string;\n}) => {\n  return (\n    <input\n      name={name}\n      value={value}\n      placeholder={placeholder}\n      className={\"form-control\"}\n      onChange={(v) => onChange(v.target.value)}\n    />\n  );\n};\n\nexport default Input;\n","import Input from \"./input\";\n\n/**\n * <textarea\n  class=\"form-control\"\n  placeholder=\"insert your json here\"\n  style=\"min-width: 100%; height: 400px;\"\n></textarea>;\n */\n\nexport default Input;\n","import React from \"react\";\n\nimport { lineToRows } from \"./lib/lines-to-rows\";\nimport { toXlsx } from \"./lib/tabular-xlsx\";\nimport * as Utils from \"./utils\";\n\nimport Select from \"./components/select\";\nimport Input from \"./components/input\";\nimport Textarea from \"./components/textarea\";\n\nimport NUtils from \"@nexys/utils\";\n\nexport default class LineToRows extends React.Component<{}, any> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = {\n      nSeqLen: 2,\n      form: { mapAttributes: {} },\n      json: null,\n    };\n  }\n\n  getXlsx = () => {\n    const {\n      form: { mapAttributes },\n    } = this.state;\n    const a = this.getContent();\n\n    if (a.length) {\n      const headers = Object.keys(mapAttributes).map((h) => {\n        return mapAttributes[h];\n      });\n\n      const rows = a.map((row) => {\n        const r: any[] = [];\n\n        headers.map((h) => {\n          r.push(row[h]);\n          return true;\n        });\n\n        return r;\n      });\n\n      const r = [\n        headers.map((h) => {\n          return { content: h, style: { font: { bold: true } } };\n        }),\n      ].concat(rows);\n\n      const workbookName = \"Users\";\n\n      toXlsx(r, workbookName).then((x) => {\n        const b = Utils.bitToBlob(\n          x,\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\"\n        );\n        const url = window.URL.createObjectURL(b);\n\n        window.location.href = url;\n      });\n    }\n  };\n\n  getContent = () => {\n    const { form } = this.state;\n    const { nSeqLen, mapAttributes, content } = form;\n    const lines = content.split(\"\\n\");\n    return lineToRows(lines, mapAttributes, nSeqLen);\n  };\n\n  getJson = () => {\n    const json = this.getContent();\n\n    this.setState({ json });\n  };\n\n  handleChange = (a: { target: { value: string } }) => {\n    try {\n      const lines = a.target.value.split(\"\\n\");\n\n      this.setState({ lines });\n    } catch (err) {}\n  };\n\n  updateForm = (a: any) => {\n    const form = NUtils.ds.updateObject(this.state.form, a);\n\n    this.setState({ form });\n  };\n\n  renderMapAttributes = (nSeqLen: any) => {\n    if (!nSeqLen) {\n      return null;\n    }\n\n    return Array(nSeqLen)\n      .fill(null)\n      .map((_, i) => {\n        return (\n          <div key={i} className=\"row\">\n            <div className=\"col-sm-1\">#{i + 1}</div>\n\n            <div className=\"col-sm-2\">\n              <Input\n                name={\"mapAttributes.\" + (i + 1)}\n                onChange={this.updateForm}\n              />\n            </div>\n          </div>\n        );\n      });\n  };\n\n  renderJson() {\n    const { json } = this.state;\n\n    if (!json) {\n      return null;\n    }\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-sm-1\">\n          <code>{JSON.stringify(json, null, 2)}</code>\n        </div>\n      </div>\n    );\n  }\n\n  render() {\n    const { lines, form } = this.state;\n    const { nSeqLen } = form;\n\n    const options = Array(100)\n      .fill(null)\n      .map((x, i) => {\n        return { id: i + 1, name: i + 1 };\n      });\n\n    return (\n      <React.Fragment>\n        <h1>Lines to Rows</h1>\n        <p>Turn multi-line encoded list in tables.</p>\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Textarea\n              placeholder={\"insert the content of the file here\"}\n              name=\"content\"\n              value={lines}\n              onChange={this.updateForm}\n            />\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-sm-3\">\n            <Select\n              name={\"nSeqLen\"}\n              onChange={this.updateForm}\n              options={options}\n            />\n          </div>\n        </div>\n\n        {this.renderMapAttributes(nSeqLen)}\n\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-primary\"\n              type=\"submit\"\n              onClick={this.getXlsx}\n            >\n              Download <i className=\"fa fa-file-excel\" />\n            </button>\n            &nbsp;\n            <button\n              className=\"btn btn-primary\"\n              type=\"submit\"\n              onClick={this.getJson}\n            >\n              JSON <i className=\"fa fa-file-code\" />\n            </button>\n          </div>\n        </div>\n\n        {this.renderJson()}\n      </React.Fragment>\n    );\n  }\n}\n","/**\n * [description]\n * @param  {[type]} lines            [description]\n * @param  {[type]} seqNLines        n lines between different sections\n * @param  {[type]} mappingFunctions map of n line:key\n * @return {[type]}                  [description]\n */\nexport const lineToRows = (\n  lines: any[],\n  mappingAttributes: { [k: string]: any },\n  seqNLines: number\n): any[] => {\n  let row: { [k: string]: any } = {};\n  const rows: any[] = [];\n\n  lines.map((line, i) => {\n    const j = i % seqNLines;\n\n    const t = mappingAttributes[j + 1];\n\n    if (t) {\n      row[t] = line;\n    }\n\n    if (j === seqNLines - 1) {\n      rows.push(row);\n      row = {};\n    }\n\n    return true;\n  });\n\n  return rows;\n};\n","import React from \"react\";\n\nimport * as Utils from \"./utils\";\nimport * as Example from \"./examples/index\";\n\nexport default class TableGenerator extends React.Component<{}, any> {\n  constructor(props: any) {\n    super(props);\n\n    this.state = { content: \"\", jsContent: [] };\n  }\n\n  onClick = () => {\n    const { content } = this.state;\n\n    Utils.toCsv(content);\n  };\n\n  handleChange = (a: { target: { value: string } }) => {\n    try {\n      const content = a.target.value;\n\n      this.setState({ content });\n    } catch (err) {}\n  };\n\n  loadExample = (exampleId: number) => {\n    const jsContent = Example.load(exampleId);\n    this.setState({ content: Utils.jsonBeautify(jsContent) });\n  };\n\n  renderNav = () => {\n    const navs = [{ id: 5, name: \"Simple CSV\", fx: () => this.loadExample(5) }];\n\n    const toLine = (i: { id: number; fx: any; name: string }) => (\n      <li key={i.id} className=\"nav-item\">\n        <button className=\"nav-link\" onClick={i.fx}>\n          Load example #{i.name}\n        </button>\n      </li>\n    );\n\n    return <ul className=\"nav\">{navs.map(toLine)}</ul>;\n  };\n\n  render() {\n    const { content } = this.state;\n\n    return (\n      <React.Fragment>\n        <h1>CSV</h1>\n        <p>\n          Turn <code>JSON</code> lists into CSV files (.csv).\n        </p>\n\n        {this.renderNav()}\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <textarea\n              className=\"form-control\"\n              style={{ minWidth: \"100%\", height: \"400px\" }}\n              placeholder={\"insert your json here\"}\n              value={content}\n              onChange={this.handleChange}\n            />\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button\n              className=\"btn btn-primary\"\n              type=\"submit\"\n              onClick={this.onClick}\n            >\n              Download <i className=\"fa fa-file\" />\n            </button>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n","/**\n * [description]\n * @param  {[type]} lines            [description]\n * @param  {[type]} seqNLines        n lines between different sections\n * @param  {[type]} mappingFunctions map of n line:key\n * @return {[type]}                  [description]\n */\n\ninterface Struc {\n  content: any[];\n  idx?: number;\n  timestamp?: any;\n}\n\nexport const srtToJson = (lines: any[]) => {\n  let row: Struc = { content: [] };\n  const rows = [];\n  let i = 0;\n\n  lines.map((line) => {\n    i += 1;\n\n    if (line === \"\") {\n      rows.push(row);\n      i = 0;\n      row = { content: [] };\n      return true;\n    }\n\n    if (i === 1) {\n      row.idx = Number(line);\n      return true;\n    }\n\n    if (i === 2) {\n      row.timestamp = line;\n      return true;\n    }\n\n    row.content.push(line);\n\n    return true;\n  });\n\n  rows.push(row);\n  return rows;\n};\n\nexport const jsonUnitToVtt = (j: Struc) => {\n  return [\n    \"\",\n    j.timestamp + \" line:-1\",\n    j.content.map((x) => \" \" + x + \" \").join(\"\\n\"),\n  ].join(\"\\n\");\n};\n\nexport const jsonToVtt = (j: Struc[]) => {\n  const r = j.map(jsonUnitToVtt);\n\n  const a = [\"WEBVTT\"].concat(r);\n\n  const s = a.join(\"\\n\");\n\n  return s; //.trim();\n};\n","import React from 'react';\n\nimport * as Utils from '../utils';\nimport * as SrtToVtt from '../lib/srt-vtt';\n\nimport JSZip from 'jszip';\n\nexport const nameToVtt = f => f.replace(/\\.[^.]+$/, '.vtt');\n\nconst zipFolderFromContentArray = cArray => {\n  const zip = new JSZip();\n  // create a file and a folder\n\n  cArray.map(c => {\n    const { filename, content } = c;\n\n    zip.file(filename, content);\n\n    zip.generateAsync({type:\"blob\"})\n    .then(function(content) {\n        const url = window.URL.createObjectURL(content);\n        window.location = url;\n    });\n\n    return true;\n  })\n}\n\nexport default () => {\n  const onChange = async event => {\n    const { files } = event.target;\n\n    // this function calls `onloadend`\n    const r = await Promise.all(Array.from(files).map(async file => {\n      //fileReader.readAsText(file);\n      const data = await Utils.readFile(file)\n      console.log(file.name);\n\n      const j = SrtToVtt.srtToJson(data.split('\\r\\n'));\n      const content = SrtToVtt.jsonToVtt(j);\n\n      const filename = nameToVtt(file.name);\n\n      return {filename, content};\n    }));\n\n    zipFolderFromContentArray(r)\n  }\n  \n  const handleClick = a => {\n    const data = null;\n    if (data === null) {\n      alert('no content available')\n    }\n\n    try {\n      const j = SrtToVtt.srtToJson(data.split('\\r\\n'));\n      const txt = SrtToVtt.jsonToVtt(j);\n      Utils.toExportTxt(txt);\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const name = 'file';\n  return (<>\n    <input type=\"file\" name={name} multiple=\"multiple\" onChange={onChange}/>\n    <button className=\"btn btn-primary\" type=\"submit\" onClick={handleClick}>\n      Download <i className=\"fa fa-file\"/>\n    </button>\n  </>);\n}","import React from 'react';\n\nimport * as Utils from '../utils';\nimport * as SrtToVtt from '../lib/srt-vtt';\n\nexport default () => {\n  const [ data, setData ] = React.useState(null);\n  const onChange = event => {\n    const file = event.target.files[0];\n    Utils.readFile(file).then(setData);\n  }\n  \n  const handleClick = a => {\n    if (data === null) {\n      alert('no content available')\n    }\n\n    try {\n      const j = SrtToVtt.srtToJson(data.split('\\r\\n'));\n      const txt = SrtToVtt.jsonToVtt(j);\n      Utils.toExportTxt(txt);\n    } catch (err) {\n      console.log(err)\n    }\n  }\n\n  const name = 'file';\n  return (<>\n    <input type=\"file\" name={name} onChange={onChange}/>\n    <button className=\"btn btn-primary\" type=\"submit\" onClick={handleClick}>\n      Download <i className=\"fa fa-file\"/>\n    </button>\n  </>);\n}","import React from 'react';\n\nimport MultipleFiles from './multiple';\nimport OneFile from './single';\n\nexport default () => {\n  return <div className=\"row\">\n    <div className=\"col-md-6\">\n      <h3>Single File</h3>\n      <OneFile/>\n    </div>\n    <div className=\"col-md-6\">\n      <h3>Multiple Files</h3>\n      <MultipleFiles/>\n    </div>\n  </div>\n}\n","import React from \"react\";\n\nimport { Link } from \"react-router-dom\";\n\nconst style = {\n  borderTop: \"1px solid #e5e5e5\",\n  borderBottom: \"1px solid #e5e5e5\",\n  boxShadow: \"0 .25rem .75rem rgba(0, 0, 0, .05)\",\n};\n\nexport default ({ children }: { children: any }) => {\n  return (\n    <React.Fragment>\n      <header>\n        <div\n          style={style}\n          className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\"\n        >\n          <h5 className=\"my-0 mr-md-auto font-weight-normal\">\n            <Link to=\"/\">Xlsx Tabular</Link>\n          </h5>\n          <nav className=\"my-2 my-md-0 mr-md-3\">\n            <Link className=\"p-2 text-dark\" to=\"/tables\">\n              Rows To Xlsx\n            </Link>\n            <Link className=\"p-2 text-dark\" to=\"/lines\">\n              Lines to rows\n            </Link>\n            <Link className=\"p-2 text-dark\" to=\"/csv\">\n              CSV\n            </Link>\n            <Link className=\"p-2 text-dark\" to=\"/srtToVtt\">\n              SRT to VTT\n            </Link>\n          </nav>\n        </div>\n      </header>\n\n      <main role=\"main\">\n        <div className=\"container\">{children}</div>\n      </main>\n    </React.Fragment>\n  );\n};\n","import React from \"react\";\n\nimport { Router, Switch, Route } from \"react-router-dom\";\nimport * as History from \"history\";\n\nimport TableGenerator from \"./table-generator\";\nimport LinesToRows from \"./lines-rows\";\nimport Csv from \"./csv\";\nimport SrtToVtt from \"./srt-vtt/index\";\n\nimport Layout from \"./layout\";\n\nconst sha = process.env.REACT_APP_GIT_SHA || \"git_sha_undefined\";\n\nconst Default = () => (\n  <div>\n    <p>Select an option from the menu above</p>\n\n    <p>\n      <a href=\"https://github.com/Nexysweb/tabular-excel\">\n        <i className=\"fa fa-code\"></i> Source\n      </a>{\" \"}\n      available under MIT license.\n    </p>\n\n    <p>\n      <small>\n        <a href={\"https://github.com/Nexysweb/tabular-excel/commit/\" + sha}>\n          {sha}\n        </a>\n      </small>\n    </p>\n  </div>\n);\n\nconst history = History.createBrowserHistory({\n  basename: process.env.PUBLIC_URL || \"\",\n});\n\nexport default class App extends React.Component {\n  render() {\n    return (\n      <Router history={history}>\n        <Layout>\n          <Switch>\n            <Route exact path=\"/tables\" component={() => <TableGenerator />} />\n            <Route exact path=\"/lines\" component={() => <LinesToRows />} />\n            <Route exact path=\"/csv\" component={() => <Csv />} />\n            <Route exact path=\"/srtToVtt\" component={() => <SrtToVtt />} />\n            <Route component={() => <Default />} />\n          </Switch>\n        </Layout>\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}