{"version":3,"sources":["lib/tabular-xlsx.js","utils.js","examples/index.js","table-generator.js","lib/lines-to-rows.js","components/select.js","components/input.js","components/textarea.js","lines-rows.js","layout.js","routes.js","serviceWorker.js","index.js"],"names":["worksheet","wb","rows","worksheetName","ws","addWorksheet","map","row","i","val","j","content","l","merged","h","v","getMerged","cell","mergeI","mergeJ","getCell","number","startsWith","link","string","Date","date","bool","style","toXlsx","a","xl","Workbook","c","Array","isArray","Object","keys","k","writeToBuffer","bitToBlob","x","type","Blob","jsonBeautify","jsContent","JSON","stringify","toExport","workbookName","parse","then","b","url","window","URL","createObjectURL","location","colorByStatus","status","load","exampleId","users","splice","user","firstName","lastName","headers","font","bold","unshift","usersSimple","styleBoldAndBlue","color","age","Math","ceil","random","maleOrFemaleInt","round","maleOrFemale","fill","patternType","fgColor","usersAdvanced","multiPageImport","TableGenerator","props","onClick","state","Utils","handleChange","target","value","setState","err","loadExample","Example","renderNav","navs","id","name","fx","className","key","this","Fragment","minWidth","height","placeholder","onChange","React","Component","lineToRows","lines","mappingAttributes","seqNLines","line","t","push","MySelect","options","label","disabled","selected","hidden","defaultValue","Hoc","Select","Input","onFocus","onBlur","autoFocus","MyTextarea","handleBlur","cols","Textarea","LineToRows","getXlsx","mapAttributes","form","getContent","length","r","concat","nSeqLen","split","getJson","json","updateForm","NUtils","ds","updateObject","renderMapAttributes","_","renderJson","borderTop","borderBottom","boxShadow","to","role","children","Default","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.72117606.chunk.js","sourcesContent":["import xl from 'excel4node';\n\nconst getCell = (ws, i, j, merged = false) => {\n  if (merged) {\n    const mergeI = i + 1 + merged.v;\n    const mergeJ = j + 1 + merged.h;\n    return ws.cell(i+1, j+1, mergeI, mergeJ, true);\n  }\n\n  return ws.cell(i+1, j+1);\n}\n\nexport const getMerged = (val) => {\n  if (val.merged && typeof val.merged.h === 'number' && typeof val.merged.v ==='number') {\n    return val.merged;\n  }\n\n  return false;\n}\n\nexport const isLink = l => l.startsWith('http://') || l.startsWith('https://');\n\n// https://stackoverflow.com/questions/643782/how-to-check-whether-an-object-is-a-date\nexport const isDate = d => d instanceof Date; //typeof d.getMilliseconds === 'function' && Object.prototype.toString.call(d) === '[object Date]';\n\nexport const isObjectAndNotArray = c => typeof c === 'object' && !Array.isArray(c);\n\nconst worksheet = (wb, rows, worksheetName) => {\n  const ws = wb.addWorksheet(worksheetName);\n\n  // go through `rows`\n  rows.map((row, i) => {\n    // go through `columns`\n    row.map((val, j) => {\n      if (typeof val !== 'object') {\n        // reassign val\n        val = {content: val};\n      }\n\n      const merged = getMerged(val);\n\n      const cell = getCell(ws, i, j, merged);\n\n      switch (typeof val.content) {\n        case 'number':\n          cell.number(val.content);\n          break;\n        case 'string':\n          if (isLink(val.content)) {\n            cell.link(val.content);\n          } else {\n            cell.string(val.content);\n          }\n          break;\n        case 'object':\n          if (isDate(val.content)) {\n            cell.date(val.content);\n          } else {\n            cell.string(val.content);\n          }\n          break;\n        case 'boolean':\n          cell.bool(val.content);\n          break;\n        default:\n          cell.string('N/A')\n          break;\n      }\n\n      if (val.style) {\n        cell.style(val.style)\n      }\n\n      return true;\n    });\n    return true;\n  });\n\n  return true;\n}\n\n/**\n * creates xlsx from rows\n * @param  rows : array of arrays. Note that if the cell can be formatted by passing an objet instead of a string, e.g. {content: 'content of the string', color: 'red', bold: true}\n * @param worksheetName : name of the worksheet\n */\nexport const toXlsx = async (content, worksheetName) => {\n  const wb = new xl.Workbook();\n\n  if (isObjectAndNotArray(content)) {\n    Object.keys(content).map(k => {\n      const rows = content[k];\n\n      worksheet(wb, rows, k);\n\n      return true;\n    });\n  } else {\n    worksheet(wb, content, worksheetName);\n  }\n\n  return await wb.writeToBuffer();\n}\n","import { toXlsx } from './lib/tabular-xlsx';\n\nexport const bitToBlob = (x, type) => new Blob([x], {type});\n\nexport const formatJsArray = (js) => {\n  if (!Array.isArray(js) || js.length === 0) {\n    return [];\n  }\n\n  return '[\\n\\t' + js.map(row => {\n    return JSON.stringify(row)\n  }).reduce((a, b) => a + ',\\n\\t' + b) + '\\n]';\n}\n\nexport const jsonBeautify = jsContent => JSON.stringify(jsContent,null,'  ');\n\nexport const toExport = (content, workbookName = 'MyWorkBook') => {\n  const jsContent = JSON.parse(content);\n\n  toXlsx(jsContent, workbookName).then(x => {\n    const b = bitToBlob(x, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n    const url = window.URL.createObjectURL(b);\n\n    // change filename\n    // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition\n    // Content-Disposition: inline\n    // Content-Disposition: attachment\n    // Content-Disposition: attachment; filename=\"filename.jpg\"\n\n    window.location = url;\n  });\n}","/**\n * list of examples\n */\n\nimport users from './users.json';\nimport multiPageImport from './multi-page.json';\n\nexport const colorByStatus = status => {\n  if (status === 'ok') return 'green';\n  if (status === 'inactive') return 'red';\n  if (status === 'pending') return 'orange';\n\n  return null;\n}\n\n// for some reason with initialization when used like this.\n//export const maleOrFemale = () => Math.round(Math.random());\n\nexport const randomInteger = () => Math.ceil(1000*Math.random());\n\nexport const usersSimple = () => {\n  const n = 10;\n  const jsContent = users.splice(0, n).map(user => {\n    return [user.firstName, user.lastName];\n  });\n\n  const headers = ['first name', 'last name'].map(x => {\n    return {\n      content: x,\n      style: {font: {bold: true}}\n    }\n  });\n\n  jsContent.unshift(headers);\n\n  return jsContent;\n}\n\nexport const usersAdvanced = () => {\n  const styleBoldAndBlue = {font: {color: 'blue', bold: true}};\n\n  const jsContent = users.map(user => {\n    const style = {font: {color: colorByStatus(user.status)}};\n    const status = {content: user.status, style: style};\n    const age = {content: randomInteger(), style: styleBoldAndBlue};\n    const maleOrFemaleInt = Math.round(Math.random());//maleOrFemale();\n    const maleOrFemaleText = maleOrFemaleInt === 1 ? 'Male' : 'Female';\n    const maleOrFemaleColor = maleOrFemaleInt === 1 ? 'blue' : 'pink';\n    const maleOrFemale = {\n      content: maleOrFemaleText,\n      style:{\n        fill:{ type: 'pattern', patternType: 'solid', fgColor: maleOrFemaleColor },\n        font: { color: 'white' }\n      }\n    };\n\n    return [user.firstName, user.lastName, status, age, maleOrFemale];\n  });\n\n  return jsContent;\n}\n\nexport const multiPage = () => {\n  const jsContent = multiPageImport;\n\n  return jsContent;\n}\n\nexport const merge = () => {\n  return [\n    [{\n      \"content\": \"merged\",\n      \"merged\": {\"v\": 1, \"h\": 2}\n    }\n    ],\n    [], // empty row here that will be filled with merged\n    [4, 5, 'https://google.com']\n  ];\n}\n\nexport const load = exampleId => {\n  switch (exampleId) {\n    case 1:\n      return usersSimple();\n    case 2:\n      return usersAdvanced();\n    case 3:\n      return multiPage();\n    case 4:\n      return merge();\n    default:\n      break;\n  }\n}","import React from 'react';\n\nimport * as Utils from './utils';\nimport * as Example from './examples/index';\n\nexport default class TableGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { content: '', jsContent: []};\n  }\n\n  onClick = () => {\n    const { content } = this.state;\n\n    Utils.toExport(content)\n  }\n\n  handleChange = (a) => {\n    try {\n      const content = (a.target.value);\n\n      this.setState({content});\n    } catch (err) { }\n  }\n\n  loadExample = exampleId => {\n    const jsContent = Example.load(exampleId);\n    this.setState({content: Utils.jsonBeautify(jsContent)});\n  }\n\n  renderNav = () => {\n    const navs = [\n      {id:1, name: 'user simple', fx: () => this.loadExample(1)},\n      {id:2, name: 'user advanced', fx: () => this.loadExample(2)},\n      {id:3, name: 'multi page', fx: () => this.loadExample(3)},\n      {id:4, name: 'merge', fx: () => this.loadExample(4)}\n    ];\n\n    const toLine = i => (<li key={i.id} className=\"nav-item\">\n      <button className=\"nav-link\" onClick={i.fx}>\n        Load example #{i.name}\n      </button>\n    </li>);\n\n    return <ul className=\"nav\">\n      {navs.map( toLine )}\n    </ul>\n  }\n\n  render() {    \n    const { content } = this.state;\n\n    return (\n      <React.Fragment>\n        <h1>Tabular Export</h1>\n        <p>\n          Turn <code>JSON</code> lists into Excel files (.xlsx).\n        </p>\n\n        {this.renderNav()}\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <textarea className=\"form-control\" style={{minWidth: '100%', height: '400px'}} placeholder={'insert your json here'} value={content} onChange={this.handleChange}/>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button className=\"btn btn-primary\" type=\"submit\" onClick={this.onClick}>\n              Download <i className=\"fa fa-file-excel\"/>\n            </button>\n          </div>\n        </div> \n      </React.Fragment>\n    );\n  }\n}","/**\n * [description]\n * @param  {[type]} lines            [description]\n * @param  {[type]} seqNLines        n lines between different sections\n * @param  {[type]} mappingFunctions map of n line:key\n * @return {[type]}                  [description]\n */\nexport const lineToRows = (lines, mappingAttributes, seqNLines) => {\n  let row = {};\n  const rows = [];\n\n  lines.map((line, i) => {\n    const j = i % seqNLines;\n\n    const t = mappingAttributes[j + 1];\n\n    if (t) {\n      row[t] = line;\n    }\n\n    if (j === seqNLines - 1) {\n      rows.push(row);\n      row = {};\n    }\n\n    return true;\n  });\n\n  return rows;\n}\n\n\n","import React from 'react';\n\nimport Hoc from '@nexys/reactutils';\n\n\nclass MySelect extends React.Component {\n  render() {\n    const options = this.props.options.map((x, i) => {\n      return <option key={i} value={x.id}>{x.name || x.label}</option>;\n    });\n\n    if (this.props.placeholder) {\n      options.unshift(<option key=\"placeholder\" value=\"\" disabled selected hidden>{this.props.placeholder}</option>);\n    }\n    return (<select\n      className=\"form-control\"\n      // defaultValue={this.state.selected}\n      value={this.props.value}\n      onChange={this.props.onChange}\n      disabled={this.props.disabled}\n      >\n      <option>{this.props.defaultValue}</option>\n      {options}\n    </select>);\n  }\n}\n\nexport default Hoc.Select()(MySelect);\n\n","import React from 'react';\n\nimport Hoc from '@nexys/reactutils';\n\nclass Input extends React.Component {\n  render() {\n    return (<input\n      className={this.props.className}\n      type={this.props.type}\n      placeholder={this.props.placeholder}\n      value={this.props.value}\n      onChange={this.props.onChange}\n      onFocus={this.props.onFocus}\n      onBlur={this.props.onBlur}\n      disabled={this.props.disabled}\n      style={this.props.style}\n      autoFocus={this.props.autoFocus}\n      />);\n  }\n}\n\nexport default Hoc.Input()(Input);\n","import React from 'react';\n\nimport Hoc from '@nexys/reactutils';\n\nclass MyTextarea extends React.Component {\n  render() {\n    const myClass = 'form-control';\n\n    return (\n      <textarea\n      /* eslint-disable react/forbid-component-props */\n        className={myClass}\n        value={this.props.value}\n        onChange={this.props.onChange}\n        onBlur={this.props.handleBlur}\n        rows={this.props.rows}\n        cols={this.props.cols}\n        placeholder={this.props.placeholder}\n        disabled={this.props.disabled}\n        style={{minWidth: '100%', height: '400px'}}\n        />\n    );\n  }\n}\n\nexport default Hoc.Textarea()(MyTextarea);\n","import React from 'react';\n\nimport { lineToRows } from './lib/lines-to-rows';\nimport { toXlsx } from './lib/tabular-xlsx'\nimport * as Utils from './utils';\n\nimport Select from './components/select';\nimport Input from './components/input';\nimport Textarea from './components/textarea';\n\nimport NUtils from '@nexys/utils';\n\nexport default class LineToRows extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nSeqLen: 2,\n      form: {mapAttributes: {}},\n      json: null\n    };\n  }\n\n  getXlsx = () => {\n    const { form: { mapAttributes }} = this.state\n    const a = this.getContent();\n\n    if (a.length) {\n      const headers = Object.keys(mapAttributes).map(h => {\n        return mapAttributes[h]\n      });\n\n      const rows = a.map(row => {\n        const r = [];\n\n        headers.map(h => {\n          r.push(row[h]);\n          return true;\n        });\n\n        return r;\n      });\n\n      const r = [headers.map(h => {\n        return {content: h, style: {font: {bold: true}}}\n      })].concat(rows);\n      \n      const workbookName = 'Users'\n\n      toXlsx(r, workbookName).then(x => {\n        const b = Utils.bitToBlob(x, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n        const url = window.URL.createObjectURL(b);\n\n        window.location = url;\n      });\n    }\n  }\n\n  getContent = () => {\n    const { form } = this.state;\n    const { nSeqLen, mapAttributes, content } = form;\n    const lines = content.split('\\n');\n    return lineToRows(lines, mapAttributes, nSeqLen);\n  }\n\n  getJson = () => {\n    const json = this.getContent()\n\n    this.setState({json});\n  }\n\n  handleChange = (a) => {\n    try {\n      const lines = a.target.value.split('\\n');\n\n      this.setState({lines});\n    } catch (err) { }\n  }\n\n  updateForm = a => {\n\n    const form = NUtils.ds.updateObject(this.state.form, a);\n\n    this.setState({form});\n  }\n\n  renderMapAttributes = (nSeqLen) => {\n    if (!nSeqLen) {\n      return null;\n    }\n\n    return Array(nSeqLen).fill(null).map((_, i) => {\n      return (<div key={i} className=\"row\">\n        <div className=\"col-sm-1\">\n          #{i + 1}\n        </div>\n\n        <div className=\"col-sm-2\">\n          <Input name={'mapAttributes.'+(i+1)} onChange={this.updateForm}/>\n        </div>\n      </div>);\n    })\n  }\n\n  renderJson() {\n    const { json } = this.state;\n\n    if (!json) {\n      return null;\n    }\n\n    return (<div className=\"row\">\n      <div className=\"col-sm-1\">\n        <code>{JSON.stringify(json, null, 2)}</code>\n      </div>\n    </div>);    \n  }\n\n  render() {    \n    const { lines, form } = this.state;\n    const { nSeqLen } = form;\n\n    const options = Array(100).fill(null).map((x, i) => {\n      return {id: i +1, name: i + 1}\n    })\n\n    return (\n      <React.Fragment>\n        <h1>Lines to Rows</h1>\n        <p>\n          Turn multi-line encoded list in tables.\n        </p>\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Textarea placeholder={'insert the content of the file here'} name=\"content\" value={lines} onChange={this.updateForm}/>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-sm-3\">\n            <Select name={'nSeqLen'}  onChange={this.updateForm} options={options}/>\n          </div>\n        </div>\n\n        {this.renderMapAttributes(nSeqLen)}\n\n        <div className=\"row\">\n          <div className=\"col\">\n            <button className=\"btn btn-primary\" type=\"submit\" onClick={this.getXlsx}>\n              Download <i className=\"fa fa-file-excel\"/>\n            </button>\n            &nbsp;\n            <button className=\"btn btn-primary\" type=\"submit\" onClick={this.getJson}>\n              JSON <i className=\"fa fa-file-code\"/>\n            </button>\n          </div>\n        </div>\n\n        {this.renderJson()}\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst style = {\n  borderTop: '1px solid #e5e5e5',\n  borderBottom: '1px solid #e5e5e5',\n  boxShadow: '0 .25rem .75rem rgba(0, 0, 0, .05)'\n}\n\nexport default (props) => {\n  return (<React.Fragment>\n    <header>\n      <div style={style} className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\">\n      <h5 className=\"my-0 mr-md-auto font-weight-normal\"><Link to=\"/\">Xlsx Tabular</Link></h5>\n      <nav className=\"my-2 my-md-0 mr-md-3\">\n        <Link className=\"p-2 text-dark\" to=\"/tables\">Rows To Xlsx</Link>\n        <Link className=\"p-2 text-dark\" to=\"/lines\">Lines to rows</Link>\n      </nav>\n    </div>\n    </header>\n\n    <main role=\"main\">\n      <div className=\"container\">\n        {props.children}\n      </div>\n    </main>\n  </React.Fragment>);\n}\n","import React from 'react';\n\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport TableGenerator from './table-generator';\nimport LinesToRows from './lines-rows';\n\nimport Layout from './layout';\n\nconst Default = () => {\n  return (<p>Select an option from the menu above</p>);\n}\n\nexport default class App extends React.Component {\n  render() { \n    return (\n     \n      <Router>\n       <Layout>\n        <Switch>\n          <Route exact path=\"/tables\" component={() => <TableGenerator/>}/>\n          <Route exact path=\"/lines\" component={() => <LinesToRows/>}/>\n          <Route component={() => <Default/>}/>\n        </Switch>\n        </Layout>\n      </Router>\n\n      \n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}