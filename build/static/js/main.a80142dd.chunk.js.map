{"version":3,"sources":["lib/tabular-xlsx.js","utils.js","table-generator.js","lib/lines-to-rows.js","components/select.js","components/input.js","components/textarea.js","lines-rows.js","layout.js","routes.js","serviceWorker.js","index.js"],"names":["toXlsx","rows","worksheetName","a","wb","xl","Workbook","ws","addWorksheet","map","row","i","val","j","cell","content","number","startsWith","link","string","style","writeToBuffer","colorByStatus","status","randomInteger","Math","ceil","random","bitToBlob","x","type","Blob","TableGenerator","props","onClick","state","jsContent","JSON","parse","then","b","Utils","url","window","URL","createObjectURL","location","handleChange","target","value","setState","err","loadUsersSimple","users","splice","user","firstName","lastName","headers","font","bold","unshift","loadUsersAdvanced","styleBoldAndBlue","color","age","renderNav","navs","id","name","fx","className","key","this","Fragment","minWidth","height","placeholder","onChange","React","Component","lineToRows","lines","mappingAttributes","seqNLines","line","t","push","MySelect","options","label","disabled","selected","hidden","defaultValue","Hoc","Select","Input","onFocus","onBlur","autoFocus","MyTextarea","handleBlur","cols","Textarea","LineToRows","getXlsx","mapAttributes","form","getContent","length","Object","keys","h","r","concat","nSeqLen","split","getJson","json","updateForm","NUtils","ds","updateObject","renderMapAttributes","Array","fill","_","stringify","renderJson","borderTop","borderBottom","boxShadow","to","role","classNameName","children","Default","App","exact","path","component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a80142dd.chunk.js","sourcesContent":["import xl from 'excel4node';\n\n/**\n * creates xlsx from rows\n * @param  rows : array of arrays. Note that if the cell can be formatted by passing an objet instead of a string, e.g. {content: 'content of the string', color: 'red', bold: true}\n * @param worksheetName : name of the worksheet\n */\nexport const toXlsx = async (rows, worksheetName) => {\n  const wb = new xl.Workbook();\n  const ws = wb.addWorksheet(worksheetName);\n\n  // go through `rows`\n  rows.map((row, i) => {\n    // go through `columns`\n    row.map((val, j) => {\n      const cell = ws.cell(i+1, j+1);\n\n      if (typeof val !== 'object') {\n        val = {content: val};\n      }\n\n      switch (typeof val.content) {\n        case 'number':\n          cell.number(val.content);\n          break;\n        case 'string':\n          if (val.content.startsWith('http://') || val.content.startsWith('https://')) {\n            cell.link(val);\n          } else {\n            cell.string(val.content);\n          }\n          break;\n        default:\n          cell.string('N/A')\n          break;\n      }\n\n      if (val.style) {\n        cell.style(val.style)\n      }\n\n      return true;\n    });\n    return true;\n  });\n\n  return await wb.writeToBuffer();\n}\n","export const colorByStatus = status => {\n  if (status === 'ok') return 'green';\n  if (status === 'inactive') return 'red';\n  if (status === 'pending') return 'orange';\n\n  return null\n}\n\nexport const randomInteger = () => Math.ceil(1000*Math.random());\n\nexport const bitToBlob = (x, type) => new Blob([x], {type});\n\nexport const formatJsArray = (js) => {\n  if (!Array.isArray(js) || js.length === 0) {\n    return [];\n  }\n\n  return '[\\n\\t' + js.map(row => {\n    return JSON.stringify(row)\n  }).reduce((a, b) => a + ',\\n\\t' + b) + '\\n]';\n}","import React from 'react';\n\n\nimport { toXlsx } from './lib/tabular-xlsx'\nimport * as Utils from './utils';\n\n// var text = 'Some data I want to export';\n//var data = new Blob([text], {type: 'text/plain'});\n//console.log(typeof data)\n// example for CSV\n//console.log(b)\n//\n//const b = new Blob(['col1,col2,col3'], {type: 'text/csv'});\n//const b = new Blob(csv, {type: 'text/csv'});\n//\nimport users from './data/users.json';\n\n\nexport default class TableGenerator extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { content: '', jsContent: []};\n  }\n\n  onClick = () => {\n    const { content } = this.state;\n\n    const jsContent = JSON.parse(content);\n\n    const workbookName = 'Users'\n\n    toXlsx(jsContent, workbookName).then(x => {\n      const b = Utils.bitToBlob(x, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      const url = window.URL.createObjectURL(b);\n\n      // change filename\n      // https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Disposition\n      // Content-Disposition: inline\n      // Content-Disposition: attachment\n      // Content-Disposition: attachment; filename=\"filename.jpg\"\n\n      window.location = url;\n    });\n  }\n\n  handleChange = (a) => {\n    try {\n      const content = (a.target.value);\n\n      this.setState({content});\n    } catch (err) { }\n  }\n\n  loadUsersSimple = () => {\n    const n = 10;\n    const jsContent = users.splice(0, n).map(user => {\n      return [user.firstName, user.lastName];\n    });\n\n    const headers = ['first name', 'last name'].map(x => {\n      return {\n        content: x,\n        style: {font: {bold: true}}\n      }\n    });\n\n    jsContent.unshift(headers);\n\n    this.setState({jsContent});\n  }\n\n  loadUsersAdvanced = () => {\n    const styleBoldAndBlue = {font: {color: 'blue', bold: true}};\n\n    const jsContent = users.map(user => {\n      const style = {font: {color: Utils.colorByStatus(user.status)}};\n      const status = {content: user.status, style: style};\n      const age = {content: Utils.randomInteger(), style: styleBoldAndBlue};\n      return [user.firstName, user.lastName, status, age];\n    });\n\n    this.setState({jsContent});\n  }\n\n  renderNav = () => {\n    const navs = [\n      {id:1, name: 'user simple', fx: this.loadUsersSimple},\n      {id:2, name: 'user advanced', fx: this.loadUsersAdvanced}\n    ];\n\n    const toLine = i => (<li key={i.id} className=\"nav-item\">\n      <button className=\"nav-link\" onClick={i.fx}>\n        Load example #{i.name}\n      </button>\n    </li>);\n\n    return <ul className=\"nav\">\n      {navs.map( toLine )}\n    </ul>\n  }\n\n  render() {    \n    const { content } = this.state;\n\n    return (\n      <React.Fragment>\n        <h1>Tabular Export</h1>\n        <p>\n          Turn <code>JSON</code> lists into Excel files (.xlsx).\n        </p>\n\n        {this.renderNav()}\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <textarea className=\"form-control\" style={{minWidth: '100%', height: '400px'}} placeholder={'insert your json here'} value={content} onChange={this.handleChange}/>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button className=\"btn btn-primary\" type=\"submit\" onClick={this.onClick}>\n              Download <i className=\"fa fa-file-excel\"/>\n            </button>\n          </div>\n        </div> \n      </React.Fragment>\n    );\n  }\n}","/**\n * [description]\n * @param  {[type]} lines            [description]\n * @param  {[type]} seqNLines        n lines between different sections\n * @param  {[type]} mappingFunctions map of n line:key\n * @return {[type]}                  [description]\n */\nexport const lineToRows = (lines, mappingAttributes, seqNLines) => {\n  let row = {};\n  const rows = [];\n\n  lines.map((line, i) => {\n    const j = i % seqNLines;\n\n    const t = mappingAttributes[j + 1];\n\n    if (t) {\n      row[t] = line;\n    }\n\n    if (j === seqNLines - 1) {\n      rows.push(row);\n      row = {};\n    }\n\n    return true;\n  });\n\n  return rows;\n}\n\n\n","import React from 'react';\n\nimport Hoc from '@nexys/reactutils';\n\n\nclass MySelect extends React.Component {\n  render() {\n    const options = this.props.options.map((x, i) => {\n      return <option key={i} value={x.id}>{x.name || x.label}</option>;\n    });\n\n    if (this.props.placeholder) {\n      options.unshift(<option key=\"placeholder\" value=\"\" disabled selected hidden>{this.props.placeholder}</option>);\n    }\n    return (<select\n      className=\"form-control\"\n      // defaultValue={this.state.selected}\n      value={this.props.value}\n      onChange={this.props.onChange}\n      disabled={this.props.disabled}\n      >\n      <option>{this.props.defaultValue}</option>\n      {options}\n    </select>);\n  }\n}\n\nexport default Hoc.Select()(MySelect);\n\n","import React from 'react';\n\nimport Hoc from '@nexys/reactutils';\n\nclass Input extends React.Component {\n  render() {\n    return (<input\n      className={this.props.className}\n      type={this.props.type}\n      placeholder={this.props.placeholder}\n      value={this.props.value}\n      onChange={this.props.onChange}\n      onFocus={this.props.onFocus}\n      onBlur={this.props.onBlur}\n      disabled={this.props.disabled}\n      style={this.props.style}\n      autoFocus={this.props.autoFocus}\n      />);\n  }\n}\n\nexport default Hoc.Input()(Input);\n","import React from 'react';\n\nimport Hoc from '@nexys/reactutils';\n\nclass MyTextarea extends React.Component {\n  render() {\n    const myClass = 'form-control';\n\n    return (\n      <textarea\n      /* eslint-disable react/forbid-component-props */\n        className={myClass}\n        value={this.props.value}\n        onChange={this.props.onChange}\n        onBlur={this.props.handleBlur}\n        rows={this.props.rows}\n        cols={this.props.cols}\n        placeholder={this.props.placeholder}\n        disabled={this.props.disabled}\n        style={{minWidth: '100%', height: '400px'}}\n        />\n    );\n  }\n}\n\nexport default Hoc.Textarea()(MyTextarea);\n","import React from 'react';\n\nimport { lineToRows } from './lib/lines-to-rows';\nimport { toXlsx } from './lib/tabular-xlsx'\nimport * as Utils from './utils';\n\nimport Select from './components/select';\nimport Input from './components/input';\nimport Textarea from './components/textarea';\n\nimport NUtils from '@nexys/utils';\n\nexport default class LineToRows extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      nSeqLen: 2,\n      form: {mapAttributes: {}},\n      json: null\n    };\n  }\n\n  getXlsx = () => {\n    const { form: { mapAttributes }} = this.state\n    const a = this.getContent();\n\n    if (a.length) {\n      const headers = Object.keys(mapAttributes).map(h => {\n        return mapAttributes[h]\n      });\n\n      const rows = a.map(row => {\n        const r = [];\n\n        headers.map(h => {\n          r.push(row[h])\n        });\n\n        return r;\n      });\n\n      const r = [headers.map(h => {\n        return {content: h, style: {font: {bold: true}}}\n      })].concat(rows);\n      \n      const workbookName = 'Users'\n\n      toXlsx(r, workbookName).then(x => {\n        const b = Utils.bitToBlob(x, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n        const url = window.URL.createObjectURL(b);\n\n        window.location = url;\n      });\n    }\n  }\n\n  getContent = () => {\n    const { form } = this.state;\n    const { nSeqLen, mapAttributes, content } = form;\n    const lines = content.split('\\n');\n    return lineToRows(lines, mapAttributes, nSeqLen);\n  }\n\n  getJson = () => {\n    const json = this.getContent()\n\n    this.setState({json});\n  }\n\n  handleChange = (a) => {\n    try {\n      const lines = a.target.value.split('\\n');\n\n      this.setState({lines});\n    } catch (err) { }\n  }\n\n  updateForm = a => {\n\n    const form = NUtils.ds.updateObject(this.state.form, a);\n\n    this.setState({form});\n  }\n\n  renderMapAttributes = (nSeqLen) => {\n    if (!nSeqLen) {\n      return null;\n    }\n\n    return Array(nSeqLen).fill(null).map((_, i) => {\n      return (<div key={i} className=\"row\">\n        <div className=\"col-sm-1\">\n          #{i + 1}\n        </div>\n\n        <div className=\"col-sm-2\">\n          <Input name={'mapAttributes.'+(i+1)} onChange={this.updateForm}/>\n        </div>\n      </div>);\n    })\n  }\n\n  renderJson() {\n    const { json } = this.state;\n\n    if (!json) {\n      return null;\n    }\n\n    return (<div className=\"row\">\n      <div className=\"col-sm-1\">\n        <code>{JSON.stringify(json, null, 2)}</code>\n      </div>\n    </div>);    \n  }\n\n  render() {    \n    const { lines, form } = this.state;\n    const { nSeqLen } = form;\n\n    const options = Array(100).fill(null).map((x, i) => {\n      return {id: i +1, name: i + 1}\n    })\n\n    return (\n      <React.Fragment>\n        <h1>Lines to Rows</h1>\n        <p>\n          Turn multi-line encoded list in tables.\n        </p>\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <Textarea placeholder={'insert the content of the file here'} name=\"content\" value={lines} onChange={this.updateForm}/>\n          </div>\n        </div>\n\n        <div className=\"row\">\n          <div className=\"col-sm-3\">\n            <Select name={'nSeqLen'}  onChange={this.updateForm} options={options}/>\n          </div>\n        </div>\n\n        {this.renderMapAttributes(nSeqLen)}\n\n        <div className=\"row\">\n          <div className=\"col\">\n            <button className=\"btn btn-primary\" type=\"submit\" onClick={this.getXlsx}>\n              Download <i className=\"fa fa-file-excel\"/>\n            </button>\n            &nbsp;\n            <button className=\"btn btn-primary\" type=\"submit\" onClick={this.getJson}>\n              JSON <i className=\"fa fa-file-code\"/>\n            </button>\n          </div>\n        </div>\n\n        {this.renderJson()}\n      </React.Fragment>\n    );\n  }\n}","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst style = {\n  borderTop: '1px solid #e5e5e5',\n  borderBottom: '1px solid #e5e5e5',\n  boxShadow: '0 .25rem .75rem rgba(0, 0, 0, .05)'\n}\n\nexport default (props) => {\n  return (<React.Fragment>\n    <header>\n      <div style={style} className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\">\n      <h5 className=\"my-0 mr-md-auto font-weight-normal\"><Link to=\"/\">Xlsx Tabular</Link></h5>\n      <nav className=\"my-2 my-md-0 mr-md-3\">\n        <Link className=\"p-2 text-dark\" to=\"/tables\">Rows To Xlsx</Link>\n        <Link className=\"p-2 text-dark\" to=\"/lines\">Lines to rows</Link>\n      </nav>\n    </div>\n    </header>\n\n    <main role=\"main\">\n      <div classNameName=\"container\">\n        {props.children}\n      </div>\n    </main>\n  </React.Fragment>);\n}\n","import React from 'react';\n\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport TableGenerator from './table-generator';\nimport LinesToRows from './lines-rows';\n\nimport Layout from './layout';\n\nconst Default = () => {\n  return (<p>Select an option from the menu above</p>);\n}\n\nexport default class App extends React.Component {\n  render() { \n    return (\n     \n      <Router>\n       <Layout>\n        <Switch>\n          <Route exact path=\"/tables\" component={() => <TableGenerator/>}/>\n          <Route exact path=\"/lines\" component={() => <LinesToRows/>}/>\n          <Route component={() => <Default/>}/>\n        </Switch>\n        </Layout>\n      </Router>\n\n      \n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}