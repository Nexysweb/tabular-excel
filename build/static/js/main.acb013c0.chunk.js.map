{"version":3,"sources":["tabular-xlsx.js","App.js","serviceWorker.js","index.js"],"names":["toXlsx","rows","worksheetName","a","wb","xl","Workbook","ws","addWorksheet","map","row","i","val","j","cell","content","number","startsWith","link","string","style","writeToBuffer","colorByStatus","status","randomInteger","Math","ceil","random","bitToBlob","x","type","Blob","App","props","onClick","jsContent","state","then","b","url","window","URL","createObjectURL","location","handleChange","JSON","parse","target","value","setState","err","loadUsersSimple","users","splice","user","firstName","lastName","headers","font","bold","unshift","loadUsersAdvanced","styleBoldAndBlue","color","age","renderNav","navs","id","name","fx","className","key","js","this","minWidth","height","placeholder","Array","isArray","length","stringify","reduce","onChange","React","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.acb013c0.chunk.js","sourcesContent":["import xl from 'excel4node';\n\n/**\n * creates xlsx from rows\n * @param  rows : array of arrays. Note that if the cell can be formatted by passing an objet instead of a string, e.g. {content: 'content of the string', color: 'red', bold: true}\n * @param worksheetName : name of the worksheet\n */\nexport const toXlsx = async (rows, worksheetName) => {\n  const wb = new xl.Workbook();\n  const ws = wb.addWorksheet(worksheetName);\n\n  // go through `rows`\n  rows.map((row, i) => {\n    // go through `columns`\n    row.map((val, j) => {\n      const cell = ws.cell(i+1, j+1);\n\n      if (typeof val !== 'object') {\n        val = {content: val};\n      }\n\n      switch (typeof val.content) {\n        case 'number':\n          cell.number(val.content);\n          break;\n        case 'string':\n          if (val.content.startsWith('http://') || val.content.startsWith('https://')) {\n            cell.link(val);\n          } else {\n            cell.string(val.content);\n          }\n          break;\n        default:\n          cell.string('N/A')\n          break;\n      }\n\n      if (val.style) {\n        cell.style(val.style)\n      }\n\n      return true;\n    });\n    return true;\n  });\n\n  return await wb.writeToBuffer();\n}\n","import React from 'react';\n\n\nimport { toXlsx } from './tabular-xlsx'\n\n// var text = 'Some data I want to export';\n//var data = new Blob([text], {type: 'text/plain'});\n//console.log(typeof data)\n// example for CSV\n//console.log(b)\n//\n//const b = new Blob(['col1,col2,col3'], {type: 'text/csv'});\n//const b = new Blob(csv, {type: 'text/csv'});\n//\nimport users from './data/users.json';\n\nconst colorByStatus = status => {\n  if (status === 'ok') return 'green';\n  if (status === 'inactive') return 'red';\n  if (status === 'pending') return 'orange';\n\n  return null\n}\n\nconst randomInteger = () => Math.ceil(1000*Math.random());\n\nconst bitToBlob = (x, type) => new Blob([x], {type});\n\nconst formatJsArray = (js) => {\n  if (!Array.isArray(js) || js.length === 0) {\n    return [];\n  }\n\n  return '[\\n\\t' + js.map(row => {\n    return JSON.stringify(row)\n  }).reduce((a, b) => a + ',\\n\\t' + b) + '\\n]';\n}\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { jsContent: []};\n  }\n\n  onClick = () => {\n    const { jsContent } = this.state;\n\n    const workbookName = 'Users'\n\n    toXlsx(jsContent, workbookName).then(x => {\n      const b = bitToBlob(x, 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');\n      const url = window.URL.createObjectURL(b);\n\n      window.location = url;\n    });\n  }\n\n  handleChange = (a) => {\n    try {\n      const jsContent = JSON.parse(a.target.value);\n\n      this.setState({jsContent});\n    } catch (err) { }\n  }\n\n  loadUsersSimple = () => {\n    const n = 10;\n    const jsContent = users.splice(0, n).map(user => {\n      return [user.firstName, user.lastName];\n    });\n\n    const headers = ['first name', 'last name'].map(x => {\n      return {\n        content: x,\n        style: {font: {bold: true}}\n      }\n    });\n\n    jsContent.unshift(headers);\n\n    this.setState({jsContent});\n  }\n\n  loadUsersAdvanced = () => {\n    const styleBoldAndBlue = {font: {color: 'blue', bold: true}};\n\n    const jsContent = users.map(user => {\n      const style = {font: {color: colorByStatus(user.status)}};\n      const status = {content: user.status, style: style};\n      const age = {content: randomInteger(), style: styleBoldAndBlue};\n      return [user.firstName, user.lastName, status, age];\n    });\n\n    this.setState({jsContent});\n  }\n\n  renderNav = () => {\n    const navs = [\n      {id:1, name: 'user simple', fx: this.loadUsersSimple},\n      {id:2, name: 'user advanced', fx: this.loadUsersAdvanced}\n    ];\n\n    const toLine = i => (<li key={i.id} className=\"nav-item\">\n      <button className=\"nav-link\" onClick={i.fx}>\n        Load example #{i.name}\n      </button>\n    </li>);\n\n    return <ul className=\"nav\">\n      {navs.map( toLine )}\n    </ul>\n  }\n\n  render() {    \n    const { jsContent } = this.state;\n\n    return (\n      <div className=\"container\">\n        <h1>Tabular Export</h1>\n        <p>\n          Turn <code>JSON</code> lists into Excel files (.xlsx).\n        </p>\n\n        {this.renderNav()}\n\n        <div className=\"row\">\n          <div className=\"col-md-12\">\n            <textarea className=\"form-control\" style={{minWidth: '100%', height: '400px'}} placeholder={'insert your json here'} value={formatJsArray(jsContent)} onChange={this.handleChange}/>\n          </div>\n        </div>\n        <div className=\"row\">\n          <div className=\"col\">\n            <button className=\"btn btn-primary\" type=\"submit\" onClick={this.onClick}>\n              Download <i className=\"fa fa-file-excel\"/>\n            </button>\n          </div>\n        </div> \n      </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}